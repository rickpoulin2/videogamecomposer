"""Add date formatting options."""
directive @dateformat(formatString: String, locale: String, fromNow: Boolean, difference: String) on FIELD_DEFINITION

"""Link to node by foreign-key relation."""
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"""Link to File node by relative path."""
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"""Proxy resolver from another field."""
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

"""Infer field types from field values."""
directive @infer on OBJECT

"""Do not infer field types from field values."""
directive @dontInfer on OBJECT

"""Define the mime-types handled by this type."""
directive @mimeTypes(
  """The mime-types handled by this type."""
  types: [String!]! = []
) on OBJECT

"""
Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
"""
directive @childOf(
  """
  A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  """
  mimeTypes: [String!]! = []

  """
  A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  """
  types: [String!]! = []
) on OBJECT

"""
DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

type File implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")

  """Returns all children nodes filtered by type ImageSharp"""
  childrenImageSharp: [ImageSharp]

  """
  Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  """
  childImageSharp: ImageSharp
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

"""Node Interface"""
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
  contentFilePath: String
}

"""
A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Directory implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Site implements Node {
  buildTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  flags: SiteFlags
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  graphqlTypegen: Boolean
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteFlags {
  DEV_SSR: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SiteFunction implements Node {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SitePage implements Node {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON
  pluginCreator: SitePlugin
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type SitePlugin implements Node {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteBuildMetadata implements Node {
  buildTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharp implements Node {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): GatsbyImageData!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

scalar GatsbyImageData

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

interface ContentfulEntry implements Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

interface ContentfulReference {
  contentful_id: String!
  id: ID!
}

type ContentfulAsset implements ContentfulReference & Node & RemoteFile {
  contentful_id: String!
  id: ID!
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI.
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: GatsbyImagePlaceholder

    """
    The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [GatsbyImageFormat] = [NO_CHANGE, WEBP]

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    jpegProgressive: Boolean = true
    resizingBehavior: ImageResizingBehavior
    cropFocus: ContentfulImageCropFocus

    """
    Desired corner radius in pixels. Results in an image with rounded corners.
    Pass `-1` for a full circle/ellipse.
    """
    cornerRadius: Int = 0
    quality: Int
  ): GatsbyImageData
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  file: ContentfulAssetFile
  title: String
  description: String
  node_locale: String
  sys: ContentfulAssetSys
  url: String
  placeholderUrl: String
  mimeType: String!
  filename: String!
  width: Int
  height: Int
  size: Int
  parent: Node
  children: [Node!]!
  internal: Internal!
  filesize: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    "\nThe image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.\nThe default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do\nnot know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying\nboth PNG and JPG is not supported and will be ignored."
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    "\nThe layout for the image.\nFIXED: A static image sized, that does not resize according to the screen width\nFULL_WIDTH: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\nCONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n"
    layout: RemoteFileLayout = CONSTRAINED

    "\nThe display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.\nThe actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities\nIgnored if layout = FLUID.\n"
    width: Int

    "\nIf set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
    height: Int

    "\nFormat of generated placeholder image, displayed while the main image loads.\nBLURRED: a blurred, low resolution image, encoded as a base64 data URI\nDOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).\nTRACED_SVG: deprecated. Will use DOMINANT_COLOR.\nNONE: no placeholder. Set the argument \"backgroundColor\" to use a fixed background color."
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    "\nIf set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.\nIf neither width or height is provided, height will be set based on the intrinsic width of the source image.\n"
    aspectRatio: Float

    "\nThe image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.\nThe default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do\nnot know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying\nboth PNG and JPG is not supported and will be ignored.\n"
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    "\nA list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.\nDefault is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.\n"
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    "\nSpecifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,\nbased on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].\nIt will never generate any images larger than the source.\n"
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    "\nThe \"sizes\" property, passed to the img tag. This describes the display size of the image.\nThis does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image\ncontainer will be the full width of the screen. In these cases we will generate an appropriate value.\n"
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    "\nThe image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.\nThe default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do\nnot know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying\nboth PNG and JPG is not supported and will be ignored."
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    "\nThe layout for the image.\nFIXED: A static image sized, that does not resize according to the screen width\nFULL_WIDTH: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\nCONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n"
    layout: RemoteFileLayout = CONSTRAINED

    "\nThe display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.\nThe actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities\nIgnored if layout = FLUID.\n"
    width: Int

    "\nIf set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
    height: Int

    "\nFormat of generated placeholder image, displayed while the main image loads.\nBLURRED: a blurred, low resolution image, encoded as a base64 data URI\nDOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).\nTRACED_SVG: deprecated. Will use DOMINANT_COLOR.\nNONE: no placeholder. Set the argument \"backgroundColor\" to use a fixed background color."
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    "\nIf set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.\nIf neither width or height is provided, height will be set based on the intrinsic width of the source image.\n"
    aspectRatio: Float

    "\nThe image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.\nThe default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do\nnot know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying\nboth PNG and JPG is not supported and will be ignored.\n"
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    "\nA list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.\nDefault is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.\n"
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    "\nSpecifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,\nbased on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].\nIt will never generate any images larger than the source.\n"
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    "\nThe \"sizes\" property, passed to the img tag. This describes the display size of the image.\nThis does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image\ncontainer will be the full width of the screen. In these cases we will generate an appropriate value.\n"
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum ImageResizingBehavior {
  NO_CHANGE

  """
  Same as the default resizing, but adds padding so that the generated image has the specified dimensions.
  """
  PAD

  """Crop a part of the original image to match the specified size."""
  CROP

  """
  Crop the image to the specified dimensions, if the original image is smaller than these dimensions, then the image will be upscaled.
  """
  FILL

  """
  When used in association with the f parameter below, creates a thumbnail from the image based on a focus area.
  """
  THUMB

  """Scale the image regardless of the original aspect ratio."""
  SCALE
}

enum ContentfulImageCropFocus {
  TOP
  TOP_LEFT
  TOP_RIGHT
  BOTTOM
  BOTTOM_RIGHT
  BOTTOM_LEFT
  RIGHT
  LEFT
  FACE
  FACES
  CENTER
}

type ContentfulAssetFile {
  url: String
  details: ContentfulAssetFileDetails
  fileName: String
  contentType: String
}

type ContentfulAssetFileDetails {
  size: Int
  image: ContentfulAssetFileDetailsImage
}

type ContentfulAssetFileDetailsImage {
  width: Int
  height: Int
}

type ContentfulAssetSys {
  type: String
  revision: Int
}

type ContentfulPage implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  title: String!
  url: String!
  hideTitle: Boolean!
  introContent: [ContentfulPageContent]
  mainContent: [ContentfulPageContent]
  link: [ContentfulLink]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulPageSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulPageSys {
  type: String
  revision: Int
  contentType: ContentfulPageSysContentType
}

type ContentfulPageSysContentType {
  sys: ContentfulPageSysContentTypeSys
}

type ContentfulPageSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulSiteGlobals implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  siteTitle: String!
  siteHeadingStart: String
  siteHeadingEnd: String!
  headerNavigation: [ContentfulLink]
  headerButtonLink: ContentfulLink
  footerNavigation: [ContentfulLink]
  siteIcon: ContentfulAsset
  siteLogo: ContentfulAsset
  siteBackground: ContentfulAsset
  footerContent: RichText
  copyrightLine: String
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulSiteGlobalsSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulSiteGlobalsSys {
  type: String
  revision: Int
  contentType: ContentfulSiteGlobalsSysContentType
}

type ContentfulSiteGlobalsSysContentType {
  sys: ContentfulSiteGlobalsSysContentTypeSys
}

type ContentfulSiteGlobalsSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulLink implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  isInternal: Boolean!
  text: String!
  targetPage: ContentfulPage
  targetLink: String
  icon: String
  styles: String
  hideText: Boolean
  component__newsletter_latest: [ContentfulComponentNewsletterLatest]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulLinkSys
  component__blog_latest: [ContentfulComponentBlogLatest]
  component__button_banner: [ContentfulComponentButtonBanner]
  site_globals: [ContentfulSiteGlobals]
  component__hero: [ContentfulComponentHero]
  component__content_card: [ContentfulComponentContentCard]
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulLinkSys {
  type: String
  revision: Int
  contentType: ContentfulLinkSysContentType
}

type ContentfulLinkSysContentType {
  sys: ContentfulLinkSysContentTypeSys
}

type ContentfulLinkSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentGroup implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  styles: String
  structureType: String
  content: [ContentfulPageContent]
  name: String
  page: [ContentfulPage]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentGroupSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentGroupSys {
  type: String
  revision: Int
  contentType: ContentfulComponentGroupSysContentType
}

type ContentfulComponentGroupSysContentType {
  sys: ContentfulComponentGroupSysContentTypeSys
}

type ContentfulComponentGroupSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentHero implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  heading: String
  styles: String
  body: RichText!
  buttons: [ContentfulLink]
  portraitImage: ContentfulAsset
  page: [ContentfulPage]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentHeroSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentHeroSys {
  type: String
  revision: Int
  contentType: ContentfulComponentHeroSysContentType
}

type ContentfulComponentHeroSysContentType {
  sys: ContentfulComponentHeroSysContentTypeSys
}

type ContentfulComponentHeroSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentText implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  styles: String
  fancyHeading: String
  dateTag(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String = "YYYY-MM-DD"

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  image: ContentfulAsset
  content: RichText!
  name: String
  component_group: [ContentfulComponentGroup]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentTextSys
  page: [ContentfulPage]
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentTextSys {
  type: String
  revision: Int
  contentType: ContentfulComponentTextSysContentType
}

type ContentfulComponentTextSysContentType {
  sys: ContentfulComponentTextSysContentTypeSys
}

type ContentfulComponentTextSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentVideo implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  title: String!
  styles: String
  cardType: String!
  videoId: String!
  backgroundImage: ContentfulAsset
  page: [ContentfulPage]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentVideoSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentVideoSys {
  type: String
  revision: Int
  contentType: ContentfulComponentVideoSysContentType
}

type ContentfulComponentVideoSysContentType {
  sys: ContentfulComponentVideoSysContentTypeSys
}

type ContentfulComponentVideoSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentButtonBanner implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  title: String!
  subtext: String
  styles: String
  cardType: String!
  buttons: [ContentfulLink]
  page: [ContentfulPage]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentButtonBannerSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentButtonBannerSys {
  type: String
  revision: Int
  contentType: ContentfulComponentButtonBannerSysContentType
}

type ContentfulComponentButtonBannerSysContentType {
  sys: ContentfulComponentButtonBannerSysContentTypeSys
}

type ContentfulComponentButtonBannerSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentContentCard implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  styles: String
  fancyHeading: String
  cardType: String!
  image: ContentfulAsset
  content: RichText!
  buttons: [ContentfulLink]
  name: String
  page: [ContentfulPage]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentContentCardSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentContentCardSys {
  type: String
  revision: Int
  contentType: ContentfulComponentContentCardSysContentType
}

type ContentfulComponentContentCardSysContentType {
  sys: ContentfulComponentContentCardSysContentTypeSys
}

type ContentfulComponentContentCardSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulAlbum implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  title: String!
  publishedDate(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String = "YYYY-MM-DD"

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  trackCount: Int!
  collaboratorName: String
  collaboratorLink: String
  coverImage: ContentfulAsset
  videoId: String!
  linkYouTube: String
  linkSpotify: String
  linkBandcamp: String
  linkItchio: String
  linkItunes: String
  linkAmazon: String
  albumDescription: RichText!
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulAlbumSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulAlbumSys {
  type: String
  revision: Int
  contentType: ContentfulAlbumSysContentType
}

type ContentfulAlbumSysContentType {
  sys: ContentfulAlbumSysContentTypeSys
}

type ContentfulAlbumSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentAlbumList implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  styles: String
  internalTitle: String
  page: [ContentfulPage]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentAlbumListSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentAlbumListSys {
  type: String
  revision: Int
  contentType: ContentfulComponentAlbumListSysContentType
}

type ContentfulComponentAlbumListSysContentType {
  sys: ContentfulComponentAlbumListSysContentTypeSys
}

type ContentfulComponentAlbumListSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulBlogEntry implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  title: String!
  publishedDate(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String = "YYYY-MM-DD"

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  content: RichText!
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulBlogEntrySys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulBlogEntrySys {
  type: String
  revision: Int
  contentType: ContentfulBlogEntrySysContentType
}

type ContentfulBlogEntrySysContentType {
  sys: ContentfulBlogEntrySysContentTypeSys
}

type ContentfulBlogEntrySysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentBlogEntries implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  internalTitle: String
  page: [ContentfulPage]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentBlogEntriesSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentBlogEntriesSys {
  type: String
  revision: Int
  contentType: ContentfulComponentBlogEntriesSysContentType
}

type ContentfulComponentBlogEntriesSysContentType {
  sys: ContentfulComponentBlogEntriesSysContentTypeSys
}

type ContentfulComponentBlogEntriesSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentBlogLatest implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  heading: String
  styles: String
  buttons: [ContentfulLink]
  component_group: [ContentfulComponentGroup]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentBlogLatestSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentBlogLatestSys {
  type: String
  revision: Int
  contentType: ContentfulComponentBlogLatestSysContentType
}

type ContentfulComponentBlogLatestSysContentType {
  sys: ContentfulComponentBlogLatestSysContentTypeSys
}

type ContentfulComponentBlogLatestSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulNewsletter implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  heading: String!
  url: String!
  publishedDate(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String = "YYYY-MM-DD"

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  bannerImage: ContentfulAsset
  tagLine: String
  bodyContent: RichText!
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulNewsletterSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulNewsletterSys {
  type: String
  revision: Int
  contentType: ContentfulNewsletterSysContentType
}

type ContentfulNewsletterSysContentType {
  sys: ContentfulNewsletterSysContentTypeSys
}

type ContentfulNewsletterSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentNewsletterLatest implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  heading: String
  styles: String
  trailingBlurb: RichText
  buttons: [ContentfulLink]
  signupButtonLabel: String
  signupForm: ContentfulComponentNewsletterSignup
  component_group: [ContentfulComponentGroup]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentNewsletterLatestSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentNewsletterLatestSys {
  type: String
  revision: Int
  contentType: ContentfulComponentNewsletterLatestSysContentType
}

type ContentfulComponentNewsletterLatestSysContentType {
  sys: ContentfulComponentNewsletterLatestSysContentTypeSys
}

type ContentfulComponentNewsletterLatestSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentNewsletterList implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  styles: String
  internalTitle: String
  page: [ContentfulPage]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentNewsletterListSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentNewsletterListSys {
  type: String
  revision: Int
  contentType: ContentfulComponentNewsletterListSysContentType
}

type ContentfulComponentNewsletterListSysContentType {
  sys: ContentfulComponentNewsletterListSysContentTypeSys
}

type ContentfulComponentNewsletterListSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentNewsletterSignup implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  heading: String
  styles: String
  introContent: RichText
  submitButtonLabel: String
  successHeading: String
  successBody: RichText
  errorHeading: String
  errorBody: RichText
  page: [ContentfulPage]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentNewsletterSignupSys
  component__newsletter_latest: [ContentfulComponentNewsletterLatest]
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentNewsletterSignupSys {
  type: String
  revision: Int
  contentType: ContentfulComponentNewsletterSignupSysContentType
}

type ContentfulComponentNewsletterSignupSysContentType {
  sys: ContentfulComponentNewsletterSignupSysContentTypeSys
}

type ContentfulComponentNewsletterSignupSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentContactForm implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  heading: String
  styles: String
  introContent: RichText
  availableTopics: [String!]
  showNewsletterSignup: Boolean
  submitButtonLabel: String
  successHeading: String
  successBody: RichText
  errorHeading: String
  errorBody: RichText
  page: [ContentfulPage]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentContactFormSys
  component_group: [ContentfulComponentGroup]
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentContactFormSys {
  type: String
  revision: Int
  contentType: ContentfulComponentContactFormSysContentType
}

type ContentfulComponentContactFormSysContentType {
  sys: ContentfulComponentContactFormSysContentTypeSys
}

type ContentfulComponentContactFormSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentCommissionCard implements ContentfulReference & ContentfulEntry & Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
  title: String!
  coverImage: ContentfulAsset
  developer: String
  publisher: String
  releaseYear: String
  steamLink: String
  itchioLink: String
  youTubeLink: String
  otherLink: String
  component_group: [ContentfulComponentGroup]
  spaceId: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  sys: ContentfulComponentCommissionCardSys
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentfulComponentCommissionCardSys {
  type: String
  revision: Int
  contentType: ContentfulComponentCommissionCardSysContentType
}

type ContentfulComponentCommissionCardSysContentType {
  sys: ContentfulComponentCommissionCardSysContentTypeSys
}

type ContentfulComponentCommissionCardSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type RichText {
  raw: String!
  references: [ContentfulPage]
}

union ContentfulPageContent = ContentfulComponentGroup | ContentfulComponentText | ContentfulComponentHero | ContentfulComponentVideo | ContentfulComponentButtonBanner | ContentfulComponentContentCard | ContentfulComponentAlbumList | ContentfulComponentBlogEntries | ContentfulComponentBlogLatest | ContentfulComponentNewsletterLatest | ContentfulComponentNewsletterList | ContentfulComponentNewsletterSignup | ContentfulComponentContactForm | ContentfulComponentCommissionCard

type ContentfulContentType implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  name: String
  displayField: String
  description: String
  sys: ContentfulContentTypeSys
}

type ContentfulContentTypeSys {
  type: String
}

type Query {
  file(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, childrenImageSharp: ImageSharpFilterListInput, childImageSharp: ImageSharpFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): File
  allFile(filter: FileFilterInput, sort: [FileSortInput], skip: Int, limit: Int): FileConnection!
  directory(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Directory
  allDirectory(filter: DirectoryFilterInput, sort: [DirectorySortInput], skip: Int, limit: Int): DirectoryConnection!
  site(buildTime: DateQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, port: IntQueryOperatorInput, host: StringQueryOperatorInput, flags: SiteFlagsFilterInput, polyfill: BooleanQueryOperatorInput, pathPrefix: StringQueryOperatorInput, jsxRuntime: StringQueryOperatorInput, trailingSlash: StringQueryOperatorInput, graphqlTypegen: BooleanQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Site
  allSite(filter: SiteFilterInput, sort: [SiteSortInput], skip: Int, limit: Int): SiteConnection!
  siteFunction(functionRoute: StringQueryOperatorInput, pluginName: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput, absoluteCompiledFilePath: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteFunction
  allSiteFunction(filter: SiteFunctionFilterInput, sort: [SiteFunctionSortInput], skip: Int, limit: Int): SiteFunctionConnection!
  sitePage(path: StringQueryOperatorInput, component: StringQueryOperatorInput, internalComponentName: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, pluginCreator: SitePluginFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SitePage
  allSitePage(filter: SitePageFilterInput, sort: [SitePageSortInput], skip: Int, limit: Int): SitePageConnection!
  sitePlugin(resolve: StringQueryOperatorInput, name: StringQueryOperatorInput, version: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, browserAPIs: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, packageJson: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SitePlugin
  allSitePlugin(filter: SitePluginFilterInput, sort: [SitePluginSortInput], skip: Int, limit: Int): SitePluginConnection!
  siteBuildMetadata(buildTime: DateQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteBuildMetadata
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, sort: [SiteBuildMetadataSortInput], skip: Int, limit: Int): SiteBuildMetadataConnection!
  imageSharp(fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, original: ImageSharpOriginalFilterInput, resize: ImageSharpResizeFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ImageSharp
  allImageSharp(filter: ImageSharpFilterInput, sort: [ImageSharpSortInput], skip: Int, limit: Int): ImageSharpConnection!
  contentfulEntry(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulEntry
  allContentfulEntry(filter: ContentfulEntryFilterInput, sort: [ContentfulEntrySortInput], skip: Int, limit: Int): ContentfulEntryConnection!
  contentfulAsset(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, file: ContentfulAssetFileFilterInput, title: StringQueryOperatorInput, description: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, sys: ContentfulAssetSysFilterInput, url: StringQueryOperatorInput, placeholderUrl: StringQueryOperatorInput, mimeType: StringQueryOperatorInput, filename: StringQueryOperatorInput, width: IntQueryOperatorInput, height: IntQueryOperatorInput, size: IntQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, filesize: IntQueryOperatorInput, publicUrl: StringQueryOperatorInput, resize: RemoteFileResizeFilterInput, gatsbyImage: GatsbyImageDataQueryOperatorInput): ContentfulAsset
  allContentfulAsset(filter: ContentfulAssetFilterInput, sort: [ContentfulAssetSortInput], skip: Int, limit: Int): ContentfulAssetConnection!
  contentfulPage(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, title: StringQueryOperatorInput, url: StringQueryOperatorInput, hideTitle: BooleanQueryOperatorInput, link: ContentfulLinkFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulPageSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulPage
  allContentfulPage(filter: ContentfulPageFilterInput, sort: [ContentfulPageSortInput], skip: Int, limit: Int): ContentfulPageConnection!
  contentfulSiteGlobals(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, siteTitle: StringQueryOperatorInput, siteHeadingStart: StringQueryOperatorInput, siteHeadingEnd: StringQueryOperatorInput, headerNavigation: ContentfulLinkFilterListInput, headerButtonLink: ContentfulLinkFilterInput, footerNavigation: ContentfulLinkFilterListInput, siteIcon: ContentfulAssetFilterInput, siteLogo: ContentfulAssetFilterInput, siteBackground: ContentfulAssetFilterInput, footerContent: RichTextFilterInput, copyrightLine: StringQueryOperatorInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulSiteGlobalsSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulSiteGlobals
  allContentfulSiteGlobals(filter: ContentfulSiteGlobalsFilterInput, sort: [ContentfulSiteGlobalsSortInput], skip: Int, limit: Int): ContentfulSiteGlobalsConnection!
  contentfulLink(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, isInternal: BooleanQueryOperatorInput, text: StringQueryOperatorInput, targetPage: ContentfulPageFilterInput, targetLink: StringQueryOperatorInput, icon: StringQueryOperatorInput, styles: StringQueryOperatorInput, hideText: BooleanQueryOperatorInput, component__newsletter_latest: ContentfulComponentNewsletterLatestFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulLinkSysFilterInput, component__blog_latest: ContentfulComponentBlogLatestFilterListInput, component__button_banner: ContentfulComponentButtonBannerFilterListInput, site_globals: ContentfulSiteGlobalsFilterListInput, component__hero: ContentfulComponentHeroFilterListInput, component__content_card: ContentfulComponentContentCardFilterListInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulLink
  allContentfulLink(filter: ContentfulLinkFilterInput, sort: [ContentfulLinkSortInput], skip: Int, limit: Int): ContentfulLinkConnection!
  contentfulComponentGroup(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, styles: StringQueryOperatorInput, structureType: StringQueryOperatorInput, name: StringQueryOperatorInput, page: ContentfulPageFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentGroupSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentGroup
  allContentfulComponentGroup(filter: ContentfulComponentGroupFilterInput, sort: [ContentfulComponentGroupSortInput], skip: Int, limit: Int): ContentfulComponentGroupConnection!
  contentfulComponentHero(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, heading: StringQueryOperatorInput, styles: StringQueryOperatorInput, body: RichTextFilterInput, buttons: ContentfulLinkFilterListInput, portraitImage: ContentfulAssetFilterInput, page: ContentfulPageFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentHeroSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentHero
  allContentfulComponentHero(filter: ContentfulComponentHeroFilterInput, sort: [ContentfulComponentHeroSortInput], skip: Int, limit: Int): ContentfulComponentHeroConnection!
  contentfulComponentText(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, styles: StringQueryOperatorInput, fancyHeading: StringQueryOperatorInput, dateTag: DateQueryOperatorInput, image: ContentfulAssetFilterInput, content: RichTextFilterInput, name: StringQueryOperatorInput, component_group: ContentfulComponentGroupFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentTextSysFilterInput, page: ContentfulPageFilterListInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentText
  allContentfulComponentText(filter: ContentfulComponentTextFilterInput, sort: [ContentfulComponentTextSortInput], skip: Int, limit: Int): ContentfulComponentTextConnection!
  contentfulComponentVideo(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, title: StringQueryOperatorInput, styles: StringQueryOperatorInput, cardType: StringQueryOperatorInput, videoId: StringQueryOperatorInput, backgroundImage: ContentfulAssetFilterInput, page: ContentfulPageFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentVideoSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentVideo
  allContentfulComponentVideo(filter: ContentfulComponentVideoFilterInput, sort: [ContentfulComponentVideoSortInput], skip: Int, limit: Int): ContentfulComponentVideoConnection!
  contentfulComponentButtonBanner(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, title: StringQueryOperatorInput, subtext: StringQueryOperatorInput, styles: StringQueryOperatorInput, cardType: StringQueryOperatorInput, buttons: ContentfulLinkFilterListInput, page: ContentfulPageFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentButtonBannerSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentButtonBanner
  allContentfulComponentButtonBanner(filter: ContentfulComponentButtonBannerFilterInput, sort: [ContentfulComponentButtonBannerSortInput], skip: Int, limit: Int): ContentfulComponentButtonBannerConnection!
  contentfulComponentContentCard(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, styles: StringQueryOperatorInput, fancyHeading: StringQueryOperatorInput, cardType: StringQueryOperatorInput, image: ContentfulAssetFilterInput, content: RichTextFilterInput, buttons: ContentfulLinkFilterListInput, name: StringQueryOperatorInput, page: ContentfulPageFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentContentCardSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentContentCard
  allContentfulComponentContentCard(filter: ContentfulComponentContentCardFilterInput, sort: [ContentfulComponentContentCardSortInput], skip: Int, limit: Int): ContentfulComponentContentCardConnection!
  contentfulAlbum(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, title: StringQueryOperatorInput, publishedDate: DateQueryOperatorInput, trackCount: IntQueryOperatorInput, collaboratorName: StringQueryOperatorInput, collaboratorLink: StringQueryOperatorInput, coverImage: ContentfulAssetFilterInput, videoId: StringQueryOperatorInput, linkYouTube: StringQueryOperatorInput, linkSpotify: StringQueryOperatorInput, linkBandcamp: StringQueryOperatorInput, linkItchio: StringQueryOperatorInput, linkItunes: StringQueryOperatorInput, linkAmazon: StringQueryOperatorInput, albumDescription: RichTextFilterInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulAlbumSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulAlbum
  allContentfulAlbum(filter: ContentfulAlbumFilterInput, sort: [ContentfulAlbumSortInput], skip: Int, limit: Int): ContentfulAlbumConnection!
  contentfulComponentAlbumList(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, styles: StringQueryOperatorInput, internalTitle: StringQueryOperatorInput, page: ContentfulPageFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentAlbumListSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentAlbumList
  allContentfulComponentAlbumList(filter: ContentfulComponentAlbumListFilterInput, sort: [ContentfulComponentAlbumListSortInput], skip: Int, limit: Int): ContentfulComponentAlbumListConnection!
  contentfulBlogEntry(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, title: StringQueryOperatorInput, publishedDate: DateQueryOperatorInput, content: RichTextFilterInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulBlogEntrySysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulBlogEntry
  allContentfulBlogEntry(filter: ContentfulBlogEntryFilterInput, sort: [ContentfulBlogEntrySortInput], skip: Int, limit: Int): ContentfulBlogEntryConnection!
  contentfulComponentBlogEntries(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, internalTitle: StringQueryOperatorInput, page: ContentfulPageFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentBlogEntriesSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentBlogEntries
  allContentfulComponentBlogEntries(filter: ContentfulComponentBlogEntriesFilterInput, sort: [ContentfulComponentBlogEntriesSortInput], skip: Int, limit: Int): ContentfulComponentBlogEntriesConnection!
  contentfulComponentBlogLatest(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, heading: StringQueryOperatorInput, styles: StringQueryOperatorInput, buttons: ContentfulLinkFilterListInput, component_group: ContentfulComponentGroupFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentBlogLatestSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentBlogLatest
  allContentfulComponentBlogLatest(filter: ContentfulComponentBlogLatestFilterInput, sort: [ContentfulComponentBlogLatestSortInput], skip: Int, limit: Int): ContentfulComponentBlogLatestConnection!
  contentfulNewsletter(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, heading: StringQueryOperatorInput, url: StringQueryOperatorInput, publishedDate: DateQueryOperatorInput, bannerImage: ContentfulAssetFilterInput, tagLine: StringQueryOperatorInput, bodyContent: RichTextFilterInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulNewsletterSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulNewsletter
  allContentfulNewsletter(filter: ContentfulNewsletterFilterInput, sort: [ContentfulNewsletterSortInput], skip: Int, limit: Int): ContentfulNewsletterConnection!
  contentfulComponentNewsletterLatest(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, heading: StringQueryOperatorInput, styles: StringQueryOperatorInput, trailingBlurb: RichTextFilterInput, buttons: ContentfulLinkFilterListInput, signupButtonLabel: StringQueryOperatorInput, signupForm: ContentfulComponentNewsletterSignupFilterInput, component_group: ContentfulComponentGroupFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentNewsletterLatestSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentNewsletterLatest
  allContentfulComponentNewsletterLatest(filter: ContentfulComponentNewsletterLatestFilterInput, sort: [ContentfulComponentNewsletterLatestSortInput], skip: Int, limit: Int): ContentfulComponentNewsletterLatestConnection!
  contentfulComponentNewsletterList(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, styles: StringQueryOperatorInput, internalTitle: StringQueryOperatorInput, page: ContentfulPageFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentNewsletterListSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentNewsletterList
  allContentfulComponentNewsletterList(filter: ContentfulComponentNewsletterListFilterInput, sort: [ContentfulComponentNewsletterListSortInput], skip: Int, limit: Int): ContentfulComponentNewsletterListConnection!
  contentfulComponentNewsletterSignup(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, heading: StringQueryOperatorInput, styles: StringQueryOperatorInput, introContent: RichTextFilterInput, submitButtonLabel: StringQueryOperatorInput, successHeading: StringQueryOperatorInput, successBody: RichTextFilterInput, errorHeading: StringQueryOperatorInput, errorBody: RichTextFilterInput, page: ContentfulPageFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentNewsletterSignupSysFilterInput, component__newsletter_latest: ContentfulComponentNewsletterLatestFilterListInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentNewsletterSignup
  allContentfulComponentNewsletterSignup(filter: ContentfulComponentNewsletterSignupFilterInput, sort: [ContentfulComponentNewsletterSignupSortInput], skip: Int, limit: Int): ContentfulComponentNewsletterSignupConnection!
  contentfulComponentContactForm(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, heading: StringQueryOperatorInput, styles: StringQueryOperatorInput, introContent: RichTextFilterInput, availableTopics: StringQueryOperatorInput, showNewsletterSignup: BooleanQueryOperatorInput, submitButtonLabel: StringQueryOperatorInput, successHeading: StringQueryOperatorInput, successBody: RichTextFilterInput, errorHeading: StringQueryOperatorInput, errorBody: RichTextFilterInput, page: ContentfulPageFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentContactFormSysFilterInput, component_group: ContentfulComponentGroupFilterListInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentContactForm
  allContentfulComponentContactForm(filter: ContentfulComponentContactFormFilterInput, sort: [ContentfulComponentContactFormSortInput], skip: Int, limit: Int): ContentfulComponentContactFormConnection!
  contentfulComponentCommissionCard(contentful_id: StringQueryOperatorInput, id: StringQueryOperatorInput, node_locale: StringQueryOperatorInput, title: StringQueryOperatorInput, coverImage: ContentfulAssetFilterInput, developer: StringQueryOperatorInput, publisher: StringQueryOperatorInput, releaseYear: StringQueryOperatorInput, steamLink: StringQueryOperatorInput, itchioLink: StringQueryOperatorInput, youTubeLink: StringQueryOperatorInput, otherLink: StringQueryOperatorInput, component_group: ContentfulComponentGroupFilterListInput, spaceId: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, sys: ContentfulComponentCommissionCardSysFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentfulComponentCommissionCard
  allContentfulComponentCommissionCard(filter: ContentfulComponentCommissionCardFilterInput, sort: [ContentfulComponentCommissionCardSortInput], skip: Int, limit: Int): ContentfulComponentCommissionCardConnection!
  contentfulContentType(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, name: StringQueryOperatorInput, displayField: StringQueryOperatorInput, description: StringQueryOperatorInput, sys: ContentfulContentTypeSysFilterInput): ContentfulContentType
  allContentfulContentType(filter: ContentfulContentTypeFilterInput, sort: [ContentfulContentTypeSortInput], skip: Int, limit: Int): ContentfulContentTypeConnection!
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

input ImageSharpFilterInput {
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: GatsbyImageDataQueryOperatorInput
  original: ImageSharpOriginalFilterInput
  resize: ImageSharpResizeFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ImageSharpFixedFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input ImageSharpFluidFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

input GatsbyImageDataQueryOperatorInput {
  eq: GatsbyImageData
  ne: GatsbyImageData
  in: [GatsbyImageData]
  nin: [GatsbyImageData]
}

input ImageSharpOriginalFilterInput {
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
}

input ImageSharpResizeFilterInput {
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
  contentFilePath: StringQueryOperatorInput
}

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldSelector!): [String!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  sum(field: FileFieldSelector!): Float
  group(skip: Int, limit: Int, field: FileFieldSelector!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

input FileFieldSelector {
  sourceInstanceName: FieldSelectorEnum
  absolutePath: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  extension: FieldSelectorEnum
  size: FieldSelectorEnum
  prettySize: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  root: FieldSelectorEnum
  dir: FieldSelectorEnum
  base: FieldSelectorEnum
  ext: FieldSelectorEnum
  name: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  dev: FieldSelectorEnum
  mode: FieldSelectorEnum
  nlink: FieldSelectorEnum
  uid: FieldSelectorEnum
  gid: FieldSelectorEnum
  rdev: FieldSelectorEnum
  ino: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  atime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  ctime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  childrenImageSharp: ImageSharpFieldSelector
  childImageSharp: ImageSharpFieldSelector
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

enum FieldSelectorEnum {
  SELECT
}

input ImageSharpFieldSelector {
  fixed: ImageSharpFixedFieldSelector
  fluid: ImageSharpFluidFieldSelector
  gatsbyImageData: FieldSelectorEnum
  original: ImageSharpOriginalFieldSelector
  resize: ImageSharpResizeFieldSelector
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ImageSharpFixedFieldSelector {
  base64: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  aspectRatio: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  originalName: FieldSelectorEnum
}

input ImageSharpFluidFieldSelector {
  base64: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  aspectRatio: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  sizes: FieldSelectorEnum
  originalImg: FieldSelectorEnum
  originalName: FieldSelectorEnum
  presentationWidth: FieldSelectorEnum
  presentationHeight: FieldSelectorEnum
}

input ImageSharpOriginalFieldSelector {
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  src: FieldSelectorEnum
}

input ImageSharpResizeFieldSelector {
  src: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  aspectRatio: FieldSelectorEnum
  originalName: FieldSelectorEnum
}

input NodeFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input InternalFieldSelector {
  content: FieldSelectorEnum
  contentDigest: FieldSelectorEnum
  description: FieldSelectorEnum
  fieldOwners: FieldSelectorEnum
  ignoreType: FieldSelectorEnum
  mediaType: FieldSelectorEnum
  owner: FieldSelectorEnum
  type: FieldSelectorEnum
  contentFilePath: FieldSelectorEnum
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldSelector!): [String!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  sum(field: FileFieldSelector!): Float
  group(skip: Int, limit: Int, field: FileFieldSelector!): [FileGroupConnection!]!
  field: String!
  fieldValue: String
}

input FileFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  childrenImageSharp: ImageSharpFilterListInput
  childImageSharp: ImageSharpFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input FileSortInput {
  sourceInstanceName: SortOrderEnum
  absolutePath: SortOrderEnum
  relativePath: SortOrderEnum
  extension: SortOrderEnum
  size: SortOrderEnum
  prettySize: SortOrderEnum
  modifiedTime: SortOrderEnum
  accessTime: SortOrderEnum
  changeTime: SortOrderEnum
  birthTime: SortOrderEnum
  root: SortOrderEnum
  dir: SortOrderEnum
  base: SortOrderEnum
  ext: SortOrderEnum
  name: SortOrderEnum
  relativeDirectory: SortOrderEnum
  dev: SortOrderEnum
  mode: SortOrderEnum
  nlink: SortOrderEnum
  uid: SortOrderEnum
  gid: SortOrderEnum
  rdev: SortOrderEnum
  ino: SortOrderEnum
  atimeMs: SortOrderEnum
  mtimeMs: SortOrderEnum
  ctimeMs: SortOrderEnum
  atime: SortOrderEnum
  mtime: SortOrderEnum
  ctime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  childrenImageSharp: ImageSharpSortInput
  childImageSharp: ImageSharpSortInput
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

enum SortOrderEnum {
  ASC
  DESC
}

input ImageSharpSortInput {
  fixed: ImageSharpFixedSortInput
  fluid: ImageSharpFluidSortInput
  gatsbyImageData: SortOrderEnum
  original: ImageSharpOriginalSortInput
  resize: ImageSharpResizeSortInput
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ImageSharpFixedSortInput {
  base64: SortOrderEnum
  tracedSVG: SortOrderEnum
  aspectRatio: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcWebp: SortOrderEnum
  srcSetWebp: SortOrderEnum
  originalName: SortOrderEnum
}

input ImageSharpFluidSortInput {
  base64: SortOrderEnum
  tracedSVG: SortOrderEnum
  aspectRatio: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcWebp: SortOrderEnum
  srcSetWebp: SortOrderEnum
  sizes: SortOrderEnum
  originalImg: SortOrderEnum
  originalName: SortOrderEnum
  presentationWidth: SortOrderEnum
  presentationHeight: SortOrderEnum
}

input ImageSharpOriginalSortInput {
  width: SortOrderEnum
  height: SortOrderEnum
  src: SortOrderEnum
}

input ImageSharpResizeSortInput {
  src: SortOrderEnum
  tracedSVG: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  aspectRatio: SortOrderEnum
  originalName: SortOrderEnum
}

input NodeSortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input InternalSortInput {
  content: SortOrderEnum
  contentDigest: SortOrderEnum
  description: SortOrderEnum
  fieldOwners: SortOrderEnum
  ignoreType: SortOrderEnum
  mediaType: SortOrderEnum
  owner: SortOrderEnum
  type: SortOrderEnum
  contentFilePath: SortOrderEnum
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldSelector!): [String!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  sum(field: DirectoryFieldSelector!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldSelector!): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

input DirectoryFieldSelector {
  sourceInstanceName: FieldSelectorEnum
  absolutePath: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  extension: FieldSelectorEnum
  size: FieldSelectorEnum
  prettySize: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  root: FieldSelectorEnum
  dir: FieldSelectorEnum
  base: FieldSelectorEnum
  ext: FieldSelectorEnum
  name: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  dev: FieldSelectorEnum
  mode: FieldSelectorEnum
  nlink: FieldSelectorEnum
  uid: FieldSelectorEnum
  gid: FieldSelectorEnum
  rdev: FieldSelectorEnum
  ino: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  atime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  ctime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldSelector!): [String!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  sum(field: DirectoryFieldSelector!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldSelector!): [DirectoryGroupConnection!]!
  field: String!
  fieldValue: String
}

input DirectoryFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input DirectorySortInput {
  sourceInstanceName: SortOrderEnum
  absolutePath: SortOrderEnum
  relativePath: SortOrderEnum
  extension: SortOrderEnum
  size: SortOrderEnum
  prettySize: SortOrderEnum
  modifiedTime: SortOrderEnum
  accessTime: SortOrderEnum
  changeTime: SortOrderEnum
  birthTime: SortOrderEnum
  root: SortOrderEnum
  dir: SortOrderEnum
  base: SortOrderEnum
  ext: SortOrderEnum
  name: SortOrderEnum
  relativeDirectory: SortOrderEnum
  dev: SortOrderEnum
  mode: SortOrderEnum
  nlink: SortOrderEnum
  uid: SortOrderEnum
  gid: SortOrderEnum
  rdev: SortOrderEnum
  ino: SortOrderEnum
  atimeMs: SortOrderEnum
  mtimeMs: SortOrderEnum
  ctimeMs: SortOrderEnum
  atime: SortOrderEnum
  mtime: SortOrderEnum
  ctime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input SiteSiteMetadataFilterInput {
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
}

input SiteFlagsFilterInput {
  DEV_SSR: BooleanQueryOperatorInput
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldSelector!): [String!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  sum(field: SiteFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFieldSelector!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

input SiteFieldSelector {
  buildTime: FieldSelectorEnum
  siteMetadata: SiteSiteMetadataFieldSelector
  port: FieldSelectorEnum
  host: FieldSelectorEnum
  flags: SiteFlagsFieldSelector
  polyfill: FieldSelectorEnum
  pathPrefix: FieldSelectorEnum
  jsxRuntime: FieldSelectorEnum
  trailingSlash: FieldSelectorEnum
  graphqlTypegen: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input SiteSiteMetadataFieldSelector {
  title: FieldSelectorEnum
  description: FieldSelectorEnum
}

input SiteFlagsFieldSelector {
  DEV_SSR: FieldSelectorEnum
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldSelector!): [String!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  sum(field: SiteFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFieldSelector!): [SiteGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  port: IntQueryOperatorInput
  host: StringQueryOperatorInput
  flags: SiteFlagsFilterInput
  polyfill: BooleanQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  jsxRuntime: StringQueryOperatorInput
  trailingSlash: StringQueryOperatorInput
  graphqlTypegen: BooleanQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteSortInput {
  buildTime: SortOrderEnum
  siteMetadata: SiteSiteMetadataSortInput
  port: SortOrderEnum
  host: SortOrderEnum
  flags: SiteFlagsSortInput
  polyfill: SortOrderEnum
  pathPrefix: SortOrderEnum
  jsxRuntime: SortOrderEnum
  trailingSlash: SortOrderEnum
  graphqlTypegen: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input SiteSiteMetadataSortInput {
  title: SortOrderEnum
  description: SortOrderEnum
}

input SiteFlagsSortInput {
  DEV_SSR: SortOrderEnum
}

type SiteFunctionConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  sum(field: SiteFunctionFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldSelector!): [SiteFunctionGroupConnection!]!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

input SiteFunctionFieldSelector {
  functionRoute: FieldSelectorEnum
  pluginName: FieldSelectorEnum
  originalAbsoluteFilePath: FieldSelectorEnum
  originalRelativeFilePath: FieldSelectorEnum
  relativeCompiledFilePath: FieldSelectorEnum
  absoluteCompiledFilePath: FieldSelectorEnum
  matchPath: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type SiteFunctionGroupConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  sum(field: SiteFunctionFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldSelector!): [SiteFunctionGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteFunctionFilterInput {
  functionRoute: StringQueryOperatorInput
  pluginName: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
  absoluteCompiledFilePath: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteFunctionSortInput {
  functionRoute: SortOrderEnum
  pluginName: SortOrderEnum
  originalAbsoluteFilePath: SortOrderEnum
  originalRelativeFilePath: SortOrderEnum
  relativeCompiledFilePath: SortOrderEnum
  absoluteCompiledFilePath: SortOrderEnum
  matchPath: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input JSONQueryOperatorInput {
  eq: JSON
  ne: JSON
  in: [JSON]
  nin: [JSON]
  regex: JSON
  glob: JSON
}

input SitePluginFilterInput {
  resolve: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  nodeAPIs: StringQueryOperatorInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  pluginOptions: JSONQueryOperatorInput
  packageJson: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldSelector!): [String!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  sum(field: SitePageFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePageFieldSelector!): [SitePageGroupConnection!]!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

input SitePageFieldSelector {
  path: FieldSelectorEnum
  component: FieldSelectorEnum
  internalComponentName: FieldSelectorEnum
  componentChunkName: FieldSelectorEnum
  matchPath: FieldSelectorEnum
  pageContext: FieldSelectorEnum
  pluginCreator: SitePluginFieldSelector
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input SitePluginFieldSelector {
  resolve: FieldSelectorEnum
  name: FieldSelectorEnum
  version: FieldSelectorEnum
  nodeAPIs: FieldSelectorEnum
  browserAPIs: FieldSelectorEnum
  ssrAPIs: FieldSelectorEnum
  pluginFilepath: FieldSelectorEnum
  pluginOptions: FieldSelectorEnum
  packageJson: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldSelector!): [String!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  sum(field: SitePageFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePageFieldSelector!): [SitePageGroupConnection!]!
  field: String!
  fieldValue: String
}

input SitePageFilterInput {
  path: StringQueryOperatorInput
  component: StringQueryOperatorInput
  internalComponentName: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  pluginCreator: SitePluginFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SitePageSortInput {
  path: SortOrderEnum
  component: SortOrderEnum
  internalComponentName: SortOrderEnum
  componentChunkName: SortOrderEnum
  matchPath: SortOrderEnum
  pageContext: SortOrderEnum
  pluginCreator: SitePluginSortInput
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input SitePluginSortInput {
  resolve: SortOrderEnum
  name: SortOrderEnum
  version: SortOrderEnum
  nodeAPIs: SortOrderEnum
  browserAPIs: SortOrderEnum
  ssrAPIs: SortOrderEnum
  pluginFilepath: SortOrderEnum
  pluginOptions: SortOrderEnum
  packageJson: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldSelector!): [String!]!
  max(field: SitePluginFieldSelector!): Float
  min(field: SitePluginFieldSelector!): Float
  sum(field: SitePluginFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldSelector!): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldSelector!): [String!]!
  max(field: SitePluginFieldSelector!): Float
  min(field: SitePluginFieldSelector!): Float
  sum(field: SitePluginFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldSelector!): [SitePluginGroupConnection!]!
  field: String!
  fieldValue: String
}

type SiteBuildMetadataConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  sum(field: SiteBuildMetadataFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldSelector!): [SiteBuildMetadataGroupConnection!]!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

input SiteBuildMetadataFieldSelector {
  buildTime: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type SiteBuildMetadataGroupConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  sum(field: SiteBuildMetadataFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldSelector!): [SiteBuildMetadataGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteBuildMetadataSortInput {
  buildTime: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldSelector!): [String!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  sum(field: ImageSharpFieldSelector!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldSelector!): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldSelector!): [String!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  sum(field: ImageSharpFieldSelector!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldSelector!): [ImageSharpGroupConnection!]!
  field: String!
  fieldValue: String
}

type ContentfulEntryConnection {
  totalCount: Int!
  edges: [ContentfulEntryEdge!]!
  nodes: [ContentfulEntry!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulEntryFieldSelector!): [String!]!
  max(field: ContentfulEntryFieldSelector!): Float
  min(field: ContentfulEntryFieldSelector!): Float
  sum(field: ContentfulEntryFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulEntryFieldSelector!): [ContentfulEntryGroupConnection!]!
}

type ContentfulEntryEdge {
  next: ContentfulEntry
  node: ContentfulEntry!
  previous: ContentfulEntry
}

input ContentfulEntryFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type ContentfulEntryGroupConnection {
  totalCount: Int!
  edges: [ContentfulEntryEdge!]!
  nodes: [ContentfulEntry!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulEntryFieldSelector!): [String!]!
  max(field: ContentfulEntryFieldSelector!): Float
  min(field: ContentfulEntryFieldSelector!): Float
  sum(field: ContentfulEntryFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulEntryFieldSelector!): [ContentfulEntryGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulEntryFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulEntrySortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulAssetFileFilterInput {
  url: StringQueryOperatorInput
  details: ContentfulAssetFileDetailsFilterInput
  fileName: StringQueryOperatorInput
  contentType: StringQueryOperatorInput
}

input ContentfulAssetFileDetailsFilterInput {
  size: IntQueryOperatorInput
  image: ContentfulAssetFileDetailsImageFilterInput
}

input ContentfulAssetFileDetailsImageFilterInput {
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
}

input ContentfulAssetSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
}

input RemoteFileResizeFilterInput {
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  src: StringQueryOperatorInput
}

type ContentfulAssetConnection {
  totalCount: Int!
  edges: [ContentfulAssetEdge!]!
  nodes: [ContentfulAsset!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulAssetFieldSelector!): [String!]!
  max(field: ContentfulAssetFieldSelector!): Float
  min(field: ContentfulAssetFieldSelector!): Float
  sum(field: ContentfulAssetFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulAssetFieldSelector!): [ContentfulAssetGroupConnection!]!
}

type ContentfulAssetEdge {
  next: ContentfulAsset
  node: ContentfulAsset!
  previous: ContentfulAsset
}

input ContentfulAssetFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  gatsbyImageData: FieldSelectorEnum
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  file: ContentfulAssetFileFieldSelector
  title: FieldSelectorEnum
  description: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  sys: ContentfulAssetSysFieldSelector
  url: FieldSelectorEnum
  placeholderUrl: FieldSelectorEnum
  mimeType: FieldSelectorEnum
  filename: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  size: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
  filesize: FieldSelectorEnum
  publicUrl: FieldSelectorEnum
  resize: RemoteFileResizeFieldSelector
  gatsbyImage: FieldSelectorEnum
}

input ContentfulAssetFileFieldSelector {
  url: FieldSelectorEnum
  details: ContentfulAssetFileDetailsFieldSelector
  fileName: FieldSelectorEnum
  contentType: FieldSelectorEnum
}

input ContentfulAssetFileDetailsFieldSelector {
  size: FieldSelectorEnum
  image: ContentfulAssetFileDetailsImageFieldSelector
}

input ContentfulAssetFileDetailsImageFieldSelector {
  width: FieldSelectorEnum
  height: FieldSelectorEnum
}

input ContentfulAssetSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
}

input RemoteFileResizeFieldSelector {
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  src: FieldSelectorEnum
}

type ContentfulAssetGroupConnection {
  totalCount: Int!
  edges: [ContentfulAssetEdge!]!
  nodes: [ContentfulAsset!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulAssetFieldSelector!): [String!]!
  max(field: ContentfulAssetFieldSelector!): Float
  min(field: ContentfulAssetFieldSelector!): Float
  sum(field: ContentfulAssetFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulAssetFieldSelector!): [ContentfulAssetGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulAssetFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  gatsbyImageData: GatsbyImageDataQueryOperatorInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  file: ContentfulAssetFileFilterInput
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  sys: ContentfulAssetSysFilterInput
  url: StringQueryOperatorInput
  placeholderUrl: StringQueryOperatorInput
  mimeType: StringQueryOperatorInput
  filename: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  size: IntQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  filesize: IntQueryOperatorInput
  publicUrl: StringQueryOperatorInput
  resize: RemoteFileResizeFilterInput
  gatsbyImage: GatsbyImageDataQueryOperatorInput
}

input ContentfulAssetSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  gatsbyImageData: SortOrderEnum
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  file: ContentfulAssetFileSortInput
  title: SortOrderEnum
  description: SortOrderEnum
  node_locale: SortOrderEnum
  sys: ContentfulAssetSysSortInput
  url: SortOrderEnum
  placeholderUrl: SortOrderEnum
  mimeType: SortOrderEnum
  filename: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  size: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
  filesize: SortOrderEnum
  publicUrl: SortOrderEnum
  resize: RemoteFileResizeSortInput
  gatsbyImage: SortOrderEnum
}

input ContentfulAssetFileSortInput {
  url: SortOrderEnum
  details: ContentfulAssetFileDetailsSortInput
  fileName: SortOrderEnum
  contentType: SortOrderEnum
}

input ContentfulAssetFileDetailsSortInput {
  size: SortOrderEnum
  image: ContentfulAssetFileDetailsImageSortInput
}

input ContentfulAssetFileDetailsImageSortInput {
  width: SortOrderEnum
  height: SortOrderEnum
}

input ContentfulAssetSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
}

input RemoteFileResizeSortInput {
  width: SortOrderEnum
  height: SortOrderEnum
  src: SortOrderEnum
}

input ContentfulLinkFilterListInput {
  elemMatch: ContentfulLinkFilterInput
}

input ContentfulLinkFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  isInternal: BooleanQueryOperatorInput
  text: StringQueryOperatorInput
  targetPage: ContentfulPageFilterInput
  targetLink: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  hideText: BooleanQueryOperatorInput
  component__newsletter_latest: ContentfulComponentNewsletterLatestFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulLinkSysFilterInput
  component__blog_latest: ContentfulComponentBlogLatestFilterListInput
  component__button_banner: ContentfulComponentButtonBannerFilterListInput
  site_globals: ContentfulSiteGlobalsFilterListInput
  component__hero: ContentfulComponentHeroFilterListInput
  component__content_card: ContentfulComponentContentCardFilterListInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulPageFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  title: StringQueryOperatorInput
  url: StringQueryOperatorInput
  hideTitle: BooleanQueryOperatorInput
  link: ContentfulLinkFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulPageSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulPageSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulPageSysContentTypeFilterInput
}

input ContentfulPageSysContentTypeFilterInput {
  sys: ContentfulPageSysContentTypeSysFilterInput
}

input ContentfulPageSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

input ContentfulComponentNewsletterLatestFilterListInput {
  elemMatch: ContentfulComponentNewsletterLatestFilterInput
}

input ContentfulComponentNewsletterLatestFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  heading: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  trailingBlurb: RichTextFilterInput
  buttons: ContentfulLinkFilterListInput
  signupButtonLabel: StringQueryOperatorInput
  signupForm: ContentfulComponentNewsletterSignupFilterInput
  component_group: ContentfulComponentGroupFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentNewsletterLatestSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input RichTextFilterInput {
  raw: StringQueryOperatorInput
  references: ContentfulPageFilterListInput
}

input ContentfulPageFilterListInput {
  elemMatch: ContentfulPageFilterInput
}

input ContentfulComponentNewsletterSignupFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  heading: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  introContent: RichTextFilterInput
  submitButtonLabel: StringQueryOperatorInput
  successHeading: StringQueryOperatorInput
  successBody: RichTextFilterInput
  errorHeading: StringQueryOperatorInput
  errorBody: RichTextFilterInput
  page: ContentfulPageFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentNewsletterSignupSysFilterInput
  component__newsletter_latest: ContentfulComponentNewsletterLatestFilterListInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentNewsletterSignupSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentNewsletterSignupSysContentTypeFilterInput
}

input ContentfulComponentNewsletterSignupSysContentTypeFilterInput {
  sys: ContentfulComponentNewsletterSignupSysContentTypeSysFilterInput
}

input ContentfulComponentNewsletterSignupSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

input ContentfulComponentGroupFilterListInput {
  elemMatch: ContentfulComponentGroupFilterInput
}

input ContentfulComponentGroupFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  structureType: StringQueryOperatorInput
  name: StringQueryOperatorInput
  page: ContentfulPageFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentGroupSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentGroupSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentGroupSysContentTypeFilterInput
}

input ContentfulComponentGroupSysContentTypeFilterInput {
  sys: ContentfulComponentGroupSysContentTypeSysFilterInput
}

input ContentfulComponentGroupSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

input ContentfulComponentNewsletterLatestSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentNewsletterLatestSysContentTypeFilterInput
}

input ContentfulComponentNewsletterLatestSysContentTypeFilterInput {
  sys: ContentfulComponentNewsletterLatestSysContentTypeSysFilterInput
}

input ContentfulComponentNewsletterLatestSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

input ContentfulLinkSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulLinkSysContentTypeFilterInput
}

input ContentfulLinkSysContentTypeFilterInput {
  sys: ContentfulLinkSysContentTypeSysFilterInput
}

input ContentfulLinkSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

input ContentfulComponentBlogLatestFilterListInput {
  elemMatch: ContentfulComponentBlogLatestFilterInput
}

input ContentfulComponentBlogLatestFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  heading: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  buttons: ContentfulLinkFilterListInput
  component_group: ContentfulComponentGroupFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentBlogLatestSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentBlogLatestSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentBlogLatestSysContentTypeFilterInput
}

input ContentfulComponentBlogLatestSysContentTypeFilterInput {
  sys: ContentfulComponentBlogLatestSysContentTypeSysFilterInput
}

input ContentfulComponentBlogLatestSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

input ContentfulComponentButtonBannerFilterListInput {
  elemMatch: ContentfulComponentButtonBannerFilterInput
}

input ContentfulComponentButtonBannerFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  title: StringQueryOperatorInput
  subtext: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  cardType: StringQueryOperatorInput
  buttons: ContentfulLinkFilterListInput
  page: ContentfulPageFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentButtonBannerSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentButtonBannerSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentButtonBannerSysContentTypeFilterInput
}

input ContentfulComponentButtonBannerSysContentTypeFilterInput {
  sys: ContentfulComponentButtonBannerSysContentTypeSysFilterInput
}

input ContentfulComponentButtonBannerSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

input ContentfulSiteGlobalsFilterListInput {
  elemMatch: ContentfulSiteGlobalsFilterInput
}

input ContentfulSiteGlobalsFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  siteTitle: StringQueryOperatorInput
  siteHeadingStart: StringQueryOperatorInput
  siteHeadingEnd: StringQueryOperatorInput
  headerNavigation: ContentfulLinkFilterListInput
  headerButtonLink: ContentfulLinkFilterInput
  footerNavigation: ContentfulLinkFilterListInput
  siteIcon: ContentfulAssetFilterInput
  siteLogo: ContentfulAssetFilterInput
  siteBackground: ContentfulAssetFilterInput
  footerContent: RichTextFilterInput
  copyrightLine: StringQueryOperatorInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulSiteGlobalsSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulSiteGlobalsSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulSiteGlobalsSysContentTypeFilterInput
}

input ContentfulSiteGlobalsSysContentTypeFilterInput {
  sys: ContentfulSiteGlobalsSysContentTypeSysFilterInput
}

input ContentfulSiteGlobalsSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

input ContentfulComponentHeroFilterListInput {
  elemMatch: ContentfulComponentHeroFilterInput
}

input ContentfulComponentHeroFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  heading: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  body: RichTextFilterInput
  buttons: ContentfulLinkFilterListInput
  portraitImage: ContentfulAssetFilterInput
  page: ContentfulPageFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentHeroSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentHeroSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentHeroSysContentTypeFilterInput
}

input ContentfulComponentHeroSysContentTypeFilterInput {
  sys: ContentfulComponentHeroSysContentTypeSysFilterInput
}

input ContentfulComponentHeroSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

input ContentfulComponentContentCardFilterListInput {
  elemMatch: ContentfulComponentContentCardFilterInput
}

input ContentfulComponentContentCardFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  fancyHeading: StringQueryOperatorInput
  cardType: StringQueryOperatorInput
  image: ContentfulAssetFilterInput
  content: RichTextFilterInput
  buttons: ContentfulLinkFilterListInput
  name: StringQueryOperatorInput
  page: ContentfulPageFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentContentCardSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentContentCardSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentContentCardSysContentTypeFilterInput
}

input ContentfulComponentContentCardSysContentTypeFilterInput {
  sys: ContentfulComponentContentCardSysContentTypeSysFilterInput
}

input ContentfulComponentContentCardSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

type ContentfulPageConnection {
  totalCount: Int!
  edges: [ContentfulPageEdge!]!
  nodes: [ContentfulPage!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulPageFieldSelector!): [String!]!
  max(field: ContentfulPageFieldSelector!): Float
  min(field: ContentfulPageFieldSelector!): Float
  sum(field: ContentfulPageFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulPageFieldSelector!): [ContentfulPageGroupConnection!]!
}

type ContentfulPageEdge {
  next: ContentfulPage
  node: ContentfulPage!
  previous: ContentfulPage
}

input ContentfulPageFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  title: FieldSelectorEnum
  url: FieldSelectorEnum
  hideTitle: FieldSelectorEnum
  link: ContentfulLinkFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulPageSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulLinkFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  isInternal: FieldSelectorEnum
  text: FieldSelectorEnum
  targetPage: ContentfulPageFieldSelector
  targetLink: FieldSelectorEnum
  icon: FieldSelectorEnum
  styles: FieldSelectorEnum
  hideText: FieldSelectorEnum
  component__newsletter_latest: ContentfulComponentNewsletterLatestFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulLinkSysFieldSelector
  component__blog_latest: ContentfulComponentBlogLatestFieldSelector
  component__button_banner: ContentfulComponentButtonBannerFieldSelector
  site_globals: ContentfulSiteGlobalsFieldSelector
  component__hero: ContentfulComponentHeroFieldSelector
  component__content_card: ContentfulComponentContentCardFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentNewsletterLatestFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  heading: FieldSelectorEnum
  styles: FieldSelectorEnum
  trailingBlurb: RichTextFieldSelector
  buttons: ContentfulLinkFieldSelector
  signupButtonLabel: FieldSelectorEnum
  signupForm: ContentfulComponentNewsletterSignupFieldSelector
  component_group: ContentfulComponentGroupFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentNewsletterLatestSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input RichTextFieldSelector {
  raw: FieldSelectorEnum
  references: ContentfulPageFieldSelector
}

input ContentfulComponentNewsletterSignupFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  heading: FieldSelectorEnum
  styles: FieldSelectorEnum
  introContent: RichTextFieldSelector
  submitButtonLabel: FieldSelectorEnum
  successHeading: FieldSelectorEnum
  successBody: RichTextFieldSelector
  errorHeading: FieldSelectorEnum
  errorBody: RichTextFieldSelector
  page: ContentfulPageFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentNewsletterSignupSysFieldSelector
  component__newsletter_latest: ContentfulComponentNewsletterLatestFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentNewsletterSignupSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentNewsletterSignupSysContentTypeFieldSelector
}

input ContentfulComponentNewsletterSignupSysContentTypeFieldSelector {
  sys: ContentfulComponentNewsletterSignupSysContentTypeSysFieldSelector
}

input ContentfulComponentNewsletterSignupSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

input ContentfulComponentGroupFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  styles: FieldSelectorEnum
  structureType: FieldSelectorEnum
  name: FieldSelectorEnum
  page: ContentfulPageFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentGroupSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentGroupSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentGroupSysContentTypeFieldSelector
}

input ContentfulComponentGroupSysContentTypeFieldSelector {
  sys: ContentfulComponentGroupSysContentTypeSysFieldSelector
}

input ContentfulComponentGroupSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

input ContentfulComponentNewsletterLatestSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentNewsletterLatestSysContentTypeFieldSelector
}

input ContentfulComponentNewsletterLatestSysContentTypeFieldSelector {
  sys: ContentfulComponentNewsletterLatestSysContentTypeSysFieldSelector
}

input ContentfulComponentNewsletterLatestSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

input ContentfulLinkSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulLinkSysContentTypeFieldSelector
}

input ContentfulLinkSysContentTypeFieldSelector {
  sys: ContentfulLinkSysContentTypeSysFieldSelector
}

input ContentfulLinkSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

input ContentfulComponentBlogLatestFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  heading: FieldSelectorEnum
  styles: FieldSelectorEnum
  buttons: ContentfulLinkFieldSelector
  component_group: ContentfulComponentGroupFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentBlogLatestSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentBlogLatestSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentBlogLatestSysContentTypeFieldSelector
}

input ContentfulComponentBlogLatestSysContentTypeFieldSelector {
  sys: ContentfulComponentBlogLatestSysContentTypeSysFieldSelector
}

input ContentfulComponentBlogLatestSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

input ContentfulComponentButtonBannerFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  title: FieldSelectorEnum
  subtext: FieldSelectorEnum
  styles: FieldSelectorEnum
  cardType: FieldSelectorEnum
  buttons: ContentfulLinkFieldSelector
  page: ContentfulPageFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentButtonBannerSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentButtonBannerSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentButtonBannerSysContentTypeFieldSelector
}

input ContentfulComponentButtonBannerSysContentTypeFieldSelector {
  sys: ContentfulComponentButtonBannerSysContentTypeSysFieldSelector
}

input ContentfulComponentButtonBannerSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

input ContentfulSiteGlobalsFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  siteTitle: FieldSelectorEnum
  siteHeadingStart: FieldSelectorEnum
  siteHeadingEnd: FieldSelectorEnum
  headerNavigation: ContentfulLinkFieldSelector
  headerButtonLink: ContentfulLinkFieldSelector
  footerNavigation: ContentfulLinkFieldSelector
  siteIcon: ContentfulAssetFieldSelector
  siteLogo: ContentfulAssetFieldSelector
  siteBackground: ContentfulAssetFieldSelector
  footerContent: RichTextFieldSelector
  copyrightLine: FieldSelectorEnum
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulSiteGlobalsSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulSiteGlobalsSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulSiteGlobalsSysContentTypeFieldSelector
}

input ContentfulSiteGlobalsSysContentTypeFieldSelector {
  sys: ContentfulSiteGlobalsSysContentTypeSysFieldSelector
}

input ContentfulSiteGlobalsSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

input ContentfulComponentHeroFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  heading: FieldSelectorEnum
  styles: FieldSelectorEnum
  body: RichTextFieldSelector
  buttons: ContentfulLinkFieldSelector
  portraitImage: ContentfulAssetFieldSelector
  page: ContentfulPageFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentHeroSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentHeroSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentHeroSysContentTypeFieldSelector
}

input ContentfulComponentHeroSysContentTypeFieldSelector {
  sys: ContentfulComponentHeroSysContentTypeSysFieldSelector
}

input ContentfulComponentHeroSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

input ContentfulComponentContentCardFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  styles: FieldSelectorEnum
  fancyHeading: FieldSelectorEnum
  cardType: FieldSelectorEnum
  image: ContentfulAssetFieldSelector
  content: RichTextFieldSelector
  buttons: ContentfulLinkFieldSelector
  name: FieldSelectorEnum
  page: ContentfulPageFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentContentCardSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentContentCardSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentContentCardSysContentTypeFieldSelector
}

input ContentfulComponentContentCardSysContentTypeFieldSelector {
  sys: ContentfulComponentContentCardSysContentTypeSysFieldSelector
}

input ContentfulComponentContentCardSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

input ContentfulPageSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulPageSysContentTypeFieldSelector
}

input ContentfulPageSysContentTypeFieldSelector {
  sys: ContentfulPageSysContentTypeSysFieldSelector
}

input ContentfulPageSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

type ContentfulPageGroupConnection {
  totalCount: Int!
  edges: [ContentfulPageEdge!]!
  nodes: [ContentfulPage!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulPageFieldSelector!): [String!]!
  max(field: ContentfulPageFieldSelector!): Float
  min(field: ContentfulPageFieldSelector!): Float
  sum(field: ContentfulPageFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulPageFieldSelector!): [ContentfulPageGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulPageSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  title: SortOrderEnum
  url: SortOrderEnum
  hideTitle: SortOrderEnum
  link: ContentfulLinkSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulPageSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulLinkSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  isInternal: SortOrderEnum
  text: SortOrderEnum
  targetPage: ContentfulPageSortInput
  targetLink: SortOrderEnum
  icon: SortOrderEnum
  styles: SortOrderEnum
  hideText: SortOrderEnum
  component__newsletter_latest: ContentfulComponentNewsletterLatestSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulLinkSysSortInput
  component__blog_latest: ContentfulComponentBlogLatestSortInput
  component__button_banner: ContentfulComponentButtonBannerSortInput
  site_globals: ContentfulSiteGlobalsSortInput
  component__hero: ContentfulComponentHeroSortInput
  component__content_card: ContentfulComponentContentCardSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentNewsletterLatestSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  heading: SortOrderEnum
  styles: SortOrderEnum
  trailingBlurb: RichTextSortInput
  buttons: ContentfulLinkSortInput
  signupButtonLabel: SortOrderEnum
  signupForm: ContentfulComponentNewsletterSignupSortInput
  component_group: ContentfulComponentGroupSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentNewsletterLatestSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input RichTextSortInput {
  raw: SortOrderEnum
  references: ContentfulPageSortInput
}

input ContentfulComponentNewsletterSignupSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  heading: SortOrderEnum
  styles: SortOrderEnum
  introContent: RichTextSortInput
  submitButtonLabel: SortOrderEnum
  successHeading: SortOrderEnum
  successBody: RichTextSortInput
  errorHeading: SortOrderEnum
  errorBody: RichTextSortInput
  page: ContentfulPageSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentNewsletterSignupSysSortInput
  component__newsletter_latest: ContentfulComponentNewsletterLatestSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentNewsletterSignupSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentNewsletterSignupSysContentTypeSortInput
}

input ContentfulComponentNewsletterSignupSysContentTypeSortInput {
  sys: ContentfulComponentNewsletterSignupSysContentTypeSysSortInput
}

input ContentfulComponentNewsletterSignupSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulComponentGroupSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  styles: SortOrderEnum
  structureType: SortOrderEnum
  name: SortOrderEnum
  page: ContentfulPageSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentGroupSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentGroupSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentGroupSysContentTypeSortInput
}

input ContentfulComponentGroupSysContentTypeSortInput {
  sys: ContentfulComponentGroupSysContentTypeSysSortInput
}

input ContentfulComponentGroupSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulComponentNewsletterLatestSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentNewsletterLatestSysContentTypeSortInput
}

input ContentfulComponentNewsletterLatestSysContentTypeSortInput {
  sys: ContentfulComponentNewsletterLatestSysContentTypeSysSortInput
}

input ContentfulComponentNewsletterLatestSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulLinkSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulLinkSysContentTypeSortInput
}

input ContentfulLinkSysContentTypeSortInput {
  sys: ContentfulLinkSysContentTypeSysSortInput
}

input ContentfulLinkSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulComponentBlogLatestSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  heading: SortOrderEnum
  styles: SortOrderEnum
  buttons: ContentfulLinkSortInput
  component_group: ContentfulComponentGroupSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentBlogLatestSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentBlogLatestSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentBlogLatestSysContentTypeSortInput
}

input ContentfulComponentBlogLatestSysContentTypeSortInput {
  sys: ContentfulComponentBlogLatestSysContentTypeSysSortInput
}

input ContentfulComponentBlogLatestSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulComponentButtonBannerSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  title: SortOrderEnum
  subtext: SortOrderEnum
  styles: SortOrderEnum
  cardType: SortOrderEnum
  buttons: ContentfulLinkSortInput
  page: ContentfulPageSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentButtonBannerSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentButtonBannerSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentButtonBannerSysContentTypeSortInput
}

input ContentfulComponentButtonBannerSysContentTypeSortInput {
  sys: ContentfulComponentButtonBannerSysContentTypeSysSortInput
}

input ContentfulComponentButtonBannerSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulSiteGlobalsSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  siteTitle: SortOrderEnum
  siteHeadingStart: SortOrderEnum
  siteHeadingEnd: SortOrderEnum
  headerNavigation: ContentfulLinkSortInput
  headerButtonLink: ContentfulLinkSortInput
  footerNavigation: ContentfulLinkSortInput
  siteIcon: ContentfulAssetSortInput
  siteLogo: ContentfulAssetSortInput
  siteBackground: ContentfulAssetSortInput
  footerContent: RichTextSortInput
  copyrightLine: SortOrderEnum
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulSiteGlobalsSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulSiteGlobalsSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulSiteGlobalsSysContentTypeSortInput
}

input ContentfulSiteGlobalsSysContentTypeSortInput {
  sys: ContentfulSiteGlobalsSysContentTypeSysSortInput
}

input ContentfulSiteGlobalsSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulComponentHeroSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  heading: SortOrderEnum
  styles: SortOrderEnum
  body: RichTextSortInput
  buttons: ContentfulLinkSortInput
  portraitImage: ContentfulAssetSortInput
  page: ContentfulPageSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentHeroSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentHeroSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentHeroSysContentTypeSortInput
}

input ContentfulComponentHeroSysContentTypeSortInput {
  sys: ContentfulComponentHeroSysContentTypeSysSortInput
}

input ContentfulComponentHeroSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulComponentContentCardSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  styles: SortOrderEnum
  fancyHeading: SortOrderEnum
  cardType: SortOrderEnum
  image: ContentfulAssetSortInput
  content: RichTextSortInput
  buttons: ContentfulLinkSortInput
  name: SortOrderEnum
  page: ContentfulPageSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentContentCardSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentContentCardSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentContentCardSysContentTypeSortInput
}

input ContentfulComponentContentCardSysContentTypeSortInput {
  sys: ContentfulComponentContentCardSysContentTypeSysSortInput
}

input ContentfulComponentContentCardSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulPageSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulPageSysContentTypeSortInput
}

input ContentfulPageSysContentTypeSortInput {
  sys: ContentfulPageSysContentTypeSysSortInput
}

input ContentfulPageSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

type ContentfulSiteGlobalsConnection {
  totalCount: Int!
  edges: [ContentfulSiteGlobalsEdge!]!
  nodes: [ContentfulSiteGlobals!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulSiteGlobalsFieldSelector!): [String!]!
  max(field: ContentfulSiteGlobalsFieldSelector!): Float
  min(field: ContentfulSiteGlobalsFieldSelector!): Float
  sum(field: ContentfulSiteGlobalsFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulSiteGlobalsFieldSelector!): [ContentfulSiteGlobalsGroupConnection!]!
}

type ContentfulSiteGlobalsEdge {
  next: ContentfulSiteGlobals
  node: ContentfulSiteGlobals!
  previous: ContentfulSiteGlobals
}

type ContentfulSiteGlobalsGroupConnection {
  totalCount: Int!
  edges: [ContentfulSiteGlobalsEdge!]!
  nodes: [ContentfulSiteGlobals!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulSiteGlobalsFieldSelector!): [String!]!
  max(field: ContentfulSiteGlobalsFieldSelector!): Float
  min(field: ContentfulSiteGlobalsFieldSelector!): Float
  sum(field: ContentfulSiteGlobalsFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulSiteGlobalsFieldSelector!): [ContentfulSiteGlobalsGroupConnection!]!
  field: String!
  fieldValue: String
}

type ContentfulLinkConnection {
  totalCount: Int!
  edges: [ContentfulLinkEdge!]!
  nodes: [ContentfulLink!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulLinkFieldSelector!): [String!]!
  max(field: ContentfulLinkFieldSelector!): Float
  min(field: ContentfulLinkFieldSelector!): Float
  sum(field: ContentfulLinkFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulLinkFieldSelector!): [ContentfulLinkGroupConnection!]!
}

type ContentfulLinkEdge {
  next: ContentfulLink
  node: ContentfulLink!
  previous: ContentfulLink
}

type ContentfulLinkGroupConnection {
  totalCount: Int!
  edges: [ContentfulLinkEdge!]!
  nodes: [ContentfulLink!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulLinkFieldSelector!): [String!]!
  max(field: ContentfulLinkFieldSelector!): Float
  min(field: ContentfulLinkFieldSelector!): Float
  sum(field: ContentfulLinkFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulLinkFieldSelector!): [ContentfulLinkGroupConnection!]!
  field: String!
  fieldValue: String
}

type ContentfulComponentGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentGroupEdge!]!
  nodes: [ContentfulComponentGroup!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentGroupFieldSelector!): [String!]!
  max(field: ContentfulComponentGroupFieldSelector!): Float
  min(field: ContentfulComponentGroupFieldSelector!): Float
  sum(field: ContentfulComponentGroupFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentGroupFieldSelector!): [ContentfulComponentGroupGroupConnection!]!
}

type ContentfulComponentGroupEdge {
  next: ContentfulComponentGroup
  node: ContentfulComponentGroup!
  previous: ContentfulComponentGroup
}

type ContentfulComponentGroupGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentGroupEdge!]!
  nodes: [ContentfulComponentGroup!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentGroupFieldSelector!): [String!]!
  max(field: ContentfulComponentGroupFieldSelector!): Float
  min(field: ContentfulComponentGroupFieldSelector!): Float
  sum(field: ContentfulComponentGroupFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentGroupFieldSelector!): [ContentfulComponentGroupGroupConnection!]!
  field: String!
  fieldValue: String
}

type ContentfulComponentHeroConnection {
  totalCount: Int!
  edges: [ContentfulComponentHeroEdge!]!
  nodes: [ContentfulComponentHero!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentHeroFieldSelector!): [String!]!
  max(field: ContentfulComponentHeroFieldSelector!): Float
  min(field: ContentfulComponentHeroFieldSelector!): Float
  sum(field: ContentfulComponentHeroFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentHeroFieldSelector!): [ContentfulComponentHeroGroupConnection!]!
}

type ContentfulComponentHeroEdge {
  next: ContentfulComponentHero
  node: ContentfulComponentHero!
  previous: ContentfulComponentHero
}

type ContentfulComponentHeroGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentHeroEdge!]!
  nodes: [ContentfulComponentHero!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentHeroFieldSelector!): [String!]!
  max(field: ContentfulComponentHeroFieldSelector!): Float
  min(field: ContentfulComponentHeroFieldSelector!): Float
  sum(field: ContentfulComponentHeroFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentHeroFieldSelector!): [ContentfulComponentHeroGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulComponentTextSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentTextSysContentTypeFilterInput
}

input ContentfulComponentTextSysContentTypeFilterInput {
  sys: ContentfulComponentTextSysContentTypeSysFilterInput
}

input ContentfulComponentTextSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

type ContentfulComponentTextConnection {
  totalCount: Int!
  edges: [ContentfulComponentTextEdge!]!
  nodes: [ContentfulComponentText!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentTextFieldSelector!): [String!]!
  max(field: ContentfulComponentTextFieldSelector!): Float
  min(field: ContentfulComponentTextFieldSelector!): Float
  sum(field: ContentfulComponentTextFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentTextFieldSelector!): [ContentfulComponentTextGroupConnection!]!
}

type ContentfulComponentTextEdge {
  next: ContentfulComponentText
  node: ContentfulComponentText!
  previous: ContentfulComponentText
}

input ContentfulComponentTextFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  styles: FieldSelectorEnum
  fancyHeading: FieldSelectorEnum
  dateTag: FieldSelectorEnum
  image: ContentfulAssetFieldSelector
  content: RichTextFieldSelector
  name: FieldSelectorEnum
  component_group: ContentfulComponentGroupFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentTextSysFieldSelector
  page: ContentfulPageFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentTextSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentTextSysContentTypeFieldSelector
}

input ContentfulComponentTextSysContentTypeFieldSelector {
  sys: ContentfulComponentTextSysContentTypeSysFieldSelector
}

input ContentfulComponentTextSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

type ContentfulComponentTextGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentTextEdge!]!
  nodes: [ContentfulComponentText!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentTextFieldSelector!): [String!]!
  max(field: ContentfulComponentTextFieldSelector!): Float
  min(field: ContentfulComponentTextFieldSelector!): Float
  sum(field: ContentfulComponentTextFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentTextFieldSelector!): [ContentfulComponentTextGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulComponentTextFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  fancyHeading: StringQueryOperatorInput
  dateTag: DateQueryOperatorInput
  image: ContentfulAssetFilterInput
  content: RichTextFilterInput
  name: StringQueryOperatorInput
  component_group: ContentfulComponentGroupFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentTextSysFilterInput
  page: ContentfulPageFilterListInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentTextSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  styles: SortOrderEnum
  fancyHeading: SortOrderEnum
  dateTag: SortOrderEnum
  image: ContentfulAssetSortInput
  content: RichTextSortInput
  name: SortOrderEnum
  component_group: ContentfulComponentGroupSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentTextSysSortInput
  page: ContentfulPageSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentTextSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentTextSysContentTypeSortInput
}

input ContentfulComponentTextSysContentTypeSortInput {
  sys: ContentfulComponentTextSysContentTypeSysSortInput
}

input ContentfulComponentTextSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulComponentVideoSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentVideoSysContentTypeFilterInput
}

input ContentfulComponentVideoSysContentTypeFilterInput {
  sys: ContentfulComponentVideoSysContentTypeSysFilterInput
}

input ContentfulComponentVideoSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

type ContentfulComponentVideoConnection {
  totalCount: Int!
  edges: [ContentfulComponentVideoEdge!]!
  nodes: [ContentfulComponentVideo!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentVideoFieldSelector!): [String!]!
  max(field: ContentfulComponentVideoFieldSelector!): Float
  min(field: ContentfulComponentVideoFieldSelector!): Float
  sum(field: ContentfulComponentVideoFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentVideoFieldSelector!): [ContentfulComponentVideoGroupConnection!]!
}

type ContentfulComponentVideoEdge {
  next: ContentfulComponentVideo
  node: ContentfulComponentVideo!
  previous: ContentfulComponentVideo
}

input ContentfulComponentVideoFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  title: FieldSelectorEnum
  styles: FieldSelectorEnum
  cardType: FieldSelectorEnum
  videoId: FieldSelectorEnum
  backgroundImage: ContentfulAssetFieldSelector
  page: ContentfulPageFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentVideoSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentVideoSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentVideoSysContentTypeFieldSelector
}

input ContentfulComponentVideoSysContentTypeFieldSelector {
  sys: ContentfulComponentVideoSysContentTypeSysFieldSelector
}

input ContentfulComponentVideoSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

type ContentfulComponentVideoGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentVideoEdge!]!
  nodes: [ContentfulComponentVideo!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentVideoFieldSelector!): [String!]!
  max(field: ContentfulComponentVideoFieldSelector!): Float
  min(field: ContentfulComponentVideoFieldSelector!): Float
  sum(field: ContentfulComponentVideoFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentVideoFieldSelector!): [ContentfulComponentVideoGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulComponentVideoFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  title: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  cardType: StringQueryOperatorInput
  videoId: StringQueryOperatorInput
  backgroundImage: ContentfulAssetFilterInput
  page: ContentfulPageFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentVideoSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentVideoSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  title: SortOrderEnum
  styles: SortOrderEnum
  cardType: SortOrderEnum
  videoId: SortOrderEnum
  backgroundImage: ContentfulAssetSortInput
  page: ContentfulPageSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentVideoSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentVideoSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentVideoSysContentTypeSortInput
}

input ContentfulComponentVideoSysContentTypeSortInput {
  sys: ContentfulComponentVideoSysContentTypeSysSortInput
}

input ContentfulComponentVideoSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

type ContentfulComponentButtonBannerConnection {
  totalCount: Int!
  edges: [ContentfulComponentButtonBannerEdge!]!
  nodes: [ContentfulComponentButtonBanner!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentButtonBannerFieldSelector!): [String!]!
  max(field: ContentfulComponentButtonBannerFieldSelector!): Float
  min(field: ContentfulComponentButtonBannerFieldSelector!): Float
  sum(field: ContentfulComponentButtonBannerFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentButtonBannerFieldSelector!): [ContentfulComponentButtonBannerGroupConnection!]!
}

type ContentfulComponentButtonBannerEdge {
  next: ContentfulComponentButtonBanner
  node: ContentfulComponentButtonBanner!
  previous: ContentfulComponentButtonBanner
}

type ContentfulComponentButtonBannerGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentButtonBannerEdge!]!
  nodes: [ContentfulComponentButtonBanner!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentButtonBannerFieldSelector!): [String!]!
  max(field: ContentfulComponentButtonBannerFieldSelector!): Float
  min(field: ContentfulComponentButtonBannerFieldSelector!): Float
  sum(field: ContentfulComponentButtonBannerFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentButtonBannerFieldSelector!): [ContentfulComponentButtonBannerGroupConnection!]!
  field: String!
  fieldValue: String
}

type ContentfulComponentContentCardConnection {
  totalCount: Int!
  edges: [ContentfulComponentContentCardEdge!]!
  nodes: [ContentfulComponentContentCard!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentContentCardFieldSelector!): [String!]!
  max(field: ContentfulComponentContentCardFieldSelector!): Float
  min(field: ContentfulComponentContentCardFieldSelector!): Float
  sum(field: ContentfulComponentContentCardFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentContentCardFieldSelector!): [ContentfulComponentContentCardGroupConnection!]!
}

type ContentfulComponentContentCardEdge {
  next: ContentfulComponentContentCard
  node: ContentfulComponentContentCard!
  previous: ContentfulComponentContentCard
}

type ContentfulComponentContentCardGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentContentCardEdge!]!
  nodes: [ContentfulComponentContentCard!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentContentCardFieldSelector!): [String!]!
  max(field: ContentfulComponentContentCardFieldSelector!): Float
  min(field: ContentfulComponentContentCardFieldSelector!): Float
  sum(field: ContentfulComponentContentCardFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentContentCardFieldSelector!): [ContentfulComponentContentCardGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulAlbumSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulAlbumSysContentTypeFilterInput
}

input ContentfulAlbumSysContentTypeFilterInput {
  sys: ContentfulAlbumSysContentTypeSysFilterInput
}

input ContentfulAlbumSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

type ContentfulAlbumConnection {
  totalCount: Int!
  edges: [ContentfulAlbumEdge!]!
  nodes: [ContentfulAlbum!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulAlbumFieldSelector!): [String!]!
  max(field: ContentfulAlbumFieldSelector!): Float
  min(field: ContentfulAlbumFieldSelector!): Float
  sum(field: ContentfulAlbumFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulAlbumFieldSelector!): [ContentfulAlbumGroupConnection!]!
}

type ContentfulAlbumEdge {
  next: ContentfulAlbum
  node: ContentfulAlbum!
  previous: ContentfulAlbum
}

input ContentfulAlbumFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  title: FieldSelectorEnum
  publishedDate: FieldSelectorEnum
  trackCount: FieldSelectorEnum
  collaboratorName: FieldSelectorEnum
  collaboratorLink: FieldSelectorEnum
  coverImage: ContentfulAssetFieldSelector
  videoId: FieldSelectorEnum
  linkYouTube: FieldSelectorEnum
  linkSpotify: FieldSelectorEnum
  linkBandcamp: FieldSelectorEnum
  linkItchio: FieldSelectorEnum
  linkItunes: FieldSelectorEnum
  linkAmazon: FieldSelectorEnum
  albumDescription: RichTextFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulAlbumSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulAlbumSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulAlbumSysContentTypeFieldSelector
}

input ContentfulAlbumSysContentTypeFieldSelector {
  sys: ContentfulAlbumSysContentTypeSysFieldSelector
}

input ContentfulAlbumSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

type ContentfulAlbumGroupConnection {
  totalCount: Int!
  edges: [ContentfulAlbumEdge!]!
  nodes: [ContentfulAlbum!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulAlbumFieldSelector!): [String!]!
  max(field: ContentfulAlbumFieldSelector!): Float
  min(field: ContentfulAlbumFieldSelector!): Float
  sum(field: ContentfulAlbumFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulAlbumFieldSelector!): [ContentfulAlbumGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulAlbumFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  title: StringQueryOperatorInput
  publishedDate: DateQueryOperatorInput
  trackCount: IntQueryOperatorInput
  collaboratorName: StringQueryOperatorInput
  collaboratorLink: StringQueryOperatorInput
  coverImage: ContentfulAssetFilterInput
  videoId: StringQueryOperatorInput
  linkYouTube: StringQueryOperatorInput
  linkSpotify: StringQueryOperatorInput
  linkBandcamp: StringQueryOperatorInput
  linkItchio: StringQueryOperatorInput
  linkItunes: StringQueryOperatorInput
  linkAmazon: StringQueryOperatorInput
  albumDescription: RichTextFilterInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulAlbumSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulAlbumSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  title: SortOrderEnum
  publishedDate: SortOrderEnum
  trackCount: SortOrderEnum
  collaboratorName: SortOrderEnum
  collaboratorLink: SortOrderEnum
  coverImage: ContentfulAssetSortInput
  videoId: SortOrderEnum
  linkYouTube: SortOrderEnum
  linkSpotify: SortOrderEnum
  linkBandcamp: SortOrderEnum
  linkItchio: SortOrderEnum
  linkItunes: SortOrderEnum
  linkAmazon: SortOrderEnum
  albumDescription: RichTextSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulAlbumSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulAlbumSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulAlbumSysContentTypeSortInput
}

input ContentfulAlbumSysContentTypeSortInput {
  sys: ContentfulAlbumSysContentTypeSysSortInput
}

input ContentfulAlbumSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulComponentAlbumListSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentAlbumListSysContentTypeFilterInput
}

input ContentfulComponentAlbumListSysContentTypeFilterInput {
  sys: ContentfulComponentAlbumListSysContentTypeSysFilterInput
}

input ContentfulComponentAlbumListSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

type ContentfulComponentAlbumListConnection {
  totalCount: Int!
  edges: [ContentfulComponentAlbumListEdge!]!
  nodes: [ContentfulComponentAlbumList!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentAlbumListFieldSelector!): [String!]!
  max(field: ContentfulComponentAlbumListFieldSelector!): Float
  min(field: ContentfulComponentAlbumListFieldSelector!): Float
  sum(field: ContentfulComponentAlbumListFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentAlbumListFieldSelector!): [ContentfulComponentAlbumListGroupConnection!]!
}

type ContentfulComponentAlbumListEdge {
  next: ContentfulComponentAlbumList
  node: ContentfulComponentAlbumList!
  previous: ContentfulComponentAlbumList
}

input ContentfulComponentAlbumListFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  styles: FieldSelectorEnum
  internalTitle: FieldSelectorEnum
  page: ContentfulPageFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentAlbumListSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentAlbumListSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentAlbumListSysContentTypeFieldSelector
}

input ContentfulComponentAlbumListSysContentTypeFieldSelector {
  sys: ContentfulComponentAlbumListSysContentTypeSysFieldSelector
}

input ContentfulComponentAlbumListSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

type ContentfulComponentAlbumListGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentAlbumListEdge!]!
  nodes: [ContentfulComponentAlbumList!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentAlbumListFieldSelector!): [String!]!
  max(field: ContentfulComponentAlbumListFieldSelector!): Float
  min(field: ContentfulComponentAlbumListFieldSelector!): Float
  sum(field: ContentfulComponentAlbumListFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentAlbumListFieldSelector!): [ContentfulComponentAlbumListGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulComponentAlbumListFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  internalTitle: StringQueryOperatorInput
  page: ContentfulPageFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentAlbumListSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentAlbumListSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  styles: SortOrderEnum
  internalTitle: SortOrderEnum
  page: ContentfulPageSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentAlbumListSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentAlbumListSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentAlbumListSysContentTypeSortInput
}

input ContentfulComponentAlbumListSysContentTypeSortInput {
  sys: ContentfulComponentAlbumListSysContentTypeSysSortInput
}

input ContentfulComponentAlbumListSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulBlogEntrySysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulBlogEntrySysContentTypeFilterInput
}

input ContentfulBlogEntrySysContentTypeFilterInput {
  sys: ContentfulBlogEntrySysContentTypeSysFilterInput
}

input ContentfulBlogEntrySysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

type ContentfulBlogEntryConnection {
  totalCount: Int!
  edges: [ContentfulBlogEntryEdge!]!
  nodes: [ContentfulBlogEntry!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulBlogEntryFieldSelector!): [String!]!
  max(field: ContentfulBlogEntryFieldSelector!): Float
  min(field: ContentfulBlogEntryFieldSelector!): Float
  sum(field: ContentfulBlogEntryFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulBlogEntryFieldSelector!): [ContentfulBlogEntryGroupConnection!]!
}

type ContentfulBlogEntryEdge {
  next: ContentfulBlogEntry
  node: ContentfulBlogEntry!
  previous: ContentfulBlogEntry
}

input ContentfulBlogEntryFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  title: FieldSelectorEnum
  publishedDate: FieldSelectorEnum
  content: RichTextFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulBlogEntrySysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulBlogEntrySysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulBlogEntrySysContentTypeFieldSelector
}

input ContentfulBlogEntrySysContentTypeFieldSelector {
  sys: ContentfulBlogEntrySysContentTypeSysFieldSelector
}

input ContentfulBlogEntrySysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

type ContentfulBlogEntryGroupConnection {
  totalCount: Int!
  edges: [ContentfulBlogEntryEdge!]!
  nodes: [ContentfulBlogEntry!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulBlogEntryFieldSelector!): [String!]!
  max(field: ContentfulBlogEntryFieldSelector!): Float
  min(field: ContentfulBlogEntryFieldSelector!): Float
  sum(field: ContentfulBlogEntryFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulBlogEntryFieldSelector!): [ContentfulBlogEntryGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulBlogEntryFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  title: StringQueryOperatorInput
  publishedDate: DateQueryOperatorInput
  content: RichTextFilterInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulBlogEntrySysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulBlogEntrySortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  title: SortOrderEnum
  publishedDate: SortOrderEnum
  content: RichTextSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulBlogEntrySysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulBlogEntrySysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulBlogEntrySysContentTypeSortInput
}

input ContentfulBlogEntrySysContentTypeSortInput {
  sys: ContentfulBlogEntrySysContentTypeSysSortInput
}

input ContentfulBlogEntrySysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulComponentBlogEntriesSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentBlogEntriesSysContentTypeFilterInput
}

input ContentfulComponentBlogEntriesSysContentTypeFilterInput {
  sys: ContentfulComponentBlogEntriesSysContentTypeSysFilterInput
}

input ContentfulComponentBlogEntriesSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

type ContentfulComponentBlogEntriesConnection {
  totalCount: Int!
  edges: [ContentfulComponentBlogEntriesEdge!]!
  nodes: [ContentfulComponentBlogEntries!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentBlogEntriesFieldSelector!): [String!]!
  max(field: ContentfulComponentBlogEntriesFieldSelector!): Float
  min(field: ContentfulComponentBlogEntriesFieldSelector!): Float
  sum(field: ContentfulComponentBlogEntriesFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentBlogEntriesFieldSelector!): [ContentfulComponentBlogEntriesGroupConnection!]!
}

type ContentfulComponentBlogEntriesEdge {
  next: ContentfulComponentBlogEntries
  node: ContentfulComponentBlogEntries!
  previous: ContentfulComponentBlogEntries
}

input ContentfulComponentBlogEntriesFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  internalTitle: FieldSelectorEnum
  page: ContentfulPageFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentBlogEntriesSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentBlogEntriesSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentBlogEntriesSysContentTypeFieldSelector
}

input ContentfulComponentBlogEntriesSysContentTypeFieldSelector {
  sys: ContentfulComponentBlogEntriesSysContentTypeSysFieldSelector
}

input ContentfulComponentBlogEntriesSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

type ContentfulComponentBlogEntriesGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentBlogEntriesEdge!]!
  nodes: [ContentfulComponentBlogEntries!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentBlogEntriesFieldSelector!): [String!]!
  max(field: ContentfulComponentBlogEntriesFieldSelector!): Float
  min(field: ContentfulComponentBlogEntriesFieldSelector!): Float
  sum(field: ContentfulComponentBlogEntriesFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentBlogEntriesFieldSelector!): [ContentfulComponentBlogEntriesGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulComponentBlogEntriesFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  internalTitle: StringQueryOperatorInput
  page: ContentfulPageFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentBlogEntriesSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentBlogEntriesSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  internalTitle: SortOrderEnum
  page: ContentfulPageSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentBlogEntriesSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentBlogEntriesSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentBlogEntriesSysContentTypeSortInput
}

input ContentfulComponentBlogEntriesSysContentTypeSortInput {
  sys: ContentfulComponentBlogEntriesSysContentTypeSysSortInput
}

input ContentfulComponentBlogEntriesSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

type ContentfulComponentBlogLatestConnection {
  totalCount: Int!
  edges: [ContentfulComponentBlogLatestEdge!]!
  nodes: [ContentfulComponentBlogLatest!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentBlogLatestFieldSelector!): [String!]!
  max(field: ContentfulComponentBlogLatestFieldSelector!): Float
  min(field: ContentfulComponentBlogLatestFieldSelector!): Float
  sum(field: ContentfulComponentBlogLatestFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentBlogLatestFieldSelector!): [ContentfulComponentBlogLatestGroupConnection!]!
}

type ContentfulComponentBlogLatestEdge {
  next: ContentfulComponentBlogLatest
  node: ContentfulComponentBlogLatest!
  previous: ContentfulComponentBlogLatest
}

type ContentfulComponentBlogLatestGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentBlogLatestEdge!]!
  nodes: [ContentfulComponentBlogLatest!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentBlogLatestFieldSelector!): [String!]!
  max(field: ContentfulComponentBlogLatestFieldSelector!): Float
  min(field: ContentfulComponentBlogLatestFieldSelector!): Float
  sum(field: ContentfulComponentBlogLatestFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentBlogLatestFieldSelector!): [ContentfulComponentBlogLatestGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulNewsletterSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulNewsletterSysContentTypeFilterInput
}

input ContentfulNewsletterSysContentTypeFilterInput {
  sys: ContentfulNewsletterSysContentTypeSysFilterInput
}

input ContentfulNewsletterSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

type ContentfulNewsletterConnection {
  totalCount: Int!
  edges: [ContentfulNewsletterEdge!]!
  nodes: [ContentfulNewsletter!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulNewsletterFieldSelector!): [String!]!
  max(field: ContentfulNewsletterFieldSelector!): Float
  min(field: ContentfulNewsletterFieldSelector!): Float
  sum(field: ContentfulNewsletterFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulNewsletterFieldSelector!): [ContentfulNewsletterGroupConnection!]!
}

type ContentfulNewsletterEdge {
  next: ContentfulNewsletter
  node: ContentfulNewsletter!
  previous: ContentfulNewsletter
}

input ContentfulNewsletterFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  heading: FieldSelectorEnum
  url: FieldSelectorEnum
  publishedDate: FieldSelectorEnum
  bannerImage: ContentfulAssetFieldSelector
  tagLine: FieldSelectorEnum
  bodyContent: RichTextFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulNewsletterSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulNewsletterSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulNewsletterSysContentTypeFieldSelector
}

input ContentfulNewsletterSysContentTypeFieldSelector {
  sys: ContentfulNewsletterSysContentTypeSysFieldSelector
}

input ContentfulNewsletterSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

type ContentfulNewsletterGroupConnection {
  totalCount: Int!
  edges: [ContentfulNewsletterEdge!]!
  nodes: [ContentfulNewsletter!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulNewsletterFieldSelector!): [String!]!
  max(field: ContentfulNewsletterFieldSelector!): Float
  min(field: ContentfulNewsletterFieldSelector!): Float
  sum(field: ContentfulNewsletterFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulNewsletterFieldSelector!): [ContentfulNewsletterGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulNewsletterFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  heading: StringQueryOperatorInput
  url: StringQueryOperatorInput
  publishedDate: DateQueryOperatorInput
  bannerImage: ContentfulAssetFilterInput
  tagLine: StringQueryOperatorInput
  bodyContent: RichTextFilterInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulNewsletterSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulNewsletterSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  heading: SortOrderEnum
  url: SortOrderEnum
  publishedDate: SortOrderEnum
  bannerImage: ContentfulAssetSortInput
  tagLine: SortOrderEnum
  bodyContent: RichTextSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulNewsletterSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulNewsletterSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulNewsletterSysContentTypeSortInput
}

input ContentfulNewsletterSysContentTypeSortInput {
  sys: ContentfulNewsletterSysContentTypeSysSortInput
}

input ContentfulNewsletterSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

type ContentfulComponentNewsletterLatestConnection {
  totalCount: Int!
  edges: [ContentfulComponentNewsletterLatestEdge!]!
  nodes: [ContentfulComponentNewsletterLatest!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentNewsletterLatestFieldSelector!): [String!]!
  max(field: ContentfulComponentNewsletterLatestFieldSelector!): Float
  min(field: ContentfulComponentNewsletterLatestFieldSelector!): Float
  sum(field: ContentfulComponentNewsletterLatestFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentNewsletterLatestFieldSelector!): [ContentfulComponentNewsletterLatestGroupConnection!]!
}

type ContentfulComponentNewsletterLatestEdge {
  next: ContentfulComponentNewsletterLatest
  node: ContentfulComponentNewsletterLatest!
  previous: ContentfulComponentNewsletterLatest
}

type ContentfulComponentNewsletterLatestGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentNewsletterLatestEdge!]!
  nodes: [ContentfulComponentNewsletterLatest!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentNewsletterLatestFieldSelector!): [String!]!
  max(field: ContentfulComponentNewsletterLatestFieldSelector!): Float
  min(field: ContentfulComponentNewsletterLatestFieldSelector!): Float
  sum(field: ContentfulComponentNewsletterLatestFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentNewsletterLatestFieldSelector!): [ContentfulComponentNewsletterLatestGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulComponentNewsletterListSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentNewsletterListSysContentTypeFilterInput
}

input ContentfulComponentNewsletterListSysContentTypeFilterInput {
  sys: ContentfulComponentNewsletterListSysContentTypeSysFilterInput
}

input ContentfulComponentNewsletterListSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

type ContentfulComponentNewsletterListConnection {
  totalCount: Int!
  edges: [ContentfulComponentNewsletterListEdge!]!
  nodes: [ContentfulComponentNewsletterList!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentNewsletterListFieldSelector!): [String!]!
  max(field: ContentfulComponentNewsletterListFieldSelector!): Float
  min(field: ContentfulComponentNewsletterListFieldSelector!): Float
  sum(field: ContentfulComponentNewsletterListFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentNewsletterListFieldSelector!): [ContentfulComponentNewsletterListGroupConnection!]!
}

type ContentfulComponentNewsletterListEdge {
  next: ContentfulComponentNewsletterList
  node: ContentfulComponentNewsletterList!
  previous: ContentfulComponentNewsletterList
}

input ContentfulComponentNewsletterListFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  styles: FieldSelectorEnum
  internalTitle: FieldSelectorEnum
  page: ContentfulPageFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentNewsletterListSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentNewsletterListSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentNewsletterListSysContentTypeFieldSelector
}

input ContentfulComponentNewsletterListSysContentTypeFieldSelector {
  sys: ContentfulComponentNewsletterListSysContentTypeSysFieldSelector
}

input ContentfulComponentNewsletterListSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

type ContentfulComponentNewsletterListGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentNewsletterListEdge!]!
  nodes: [ContentfulComponentNewsletterList!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentNewsletterListFieldSelector!): [String!]!
  max(field: ContentfulComponentNewsletterListFieldSelector!): Float
  min(field: ContentfulComponentNewsletterListFieldSelector!): Float
  sum(field: ContentfulComponentNewsletterListFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentNewsletterListFieldSelector!): [ContentfulComponentNewsletterListGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulComponentNewsletterListFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  internalTitle: StringQueryOperatorInput
  page: ContentfulPageFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentNewsletterListSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentNewsletterListSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  styles: SortOrderEnum
  internalTitle: SortOrderEnum
  page: ContentfulPageSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentNewsletterListSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentNewsletterListSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentNewsletterListSysContentTypeSortInput
}

input ContentfulComponentNewsletterListSysContentTypeSortInput {
  sys: ContentfulComponentNewsletterListSysContentTypeSysSortInput
}

input ContentfulComponentNewsletterListSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

type ContentfulComponentNewsletterSignupConnection {
  totalCount: Int!
  edges: [ContentfulComponentNewsletterSignupEdge!]!
  nodes: [ContentfulComponentNewsletterSignup!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentNewsletterSignupFieldSelector!): [String!]!
  max(field: ContentfulComponentNewsletterSignupFieldSelector!): Float
  min(field: ContentfulComponentNewsletterSignupFieldSelector!): Float
  sum(field: ContentfulComponentNewsletterSignupFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentNewsletterSignupFieldSelector!): [ContentfulComponentNewsletterSignupGroupConnection!]!
}

type ContentfulComponentNewsletterSignupEdge {
  next: ContentfulComponentNewsletterSignup
  node: ContentfulComponentNewsletterSignup!
  previous: ContentfulComponentNewsletterSignup
}

type ContentfulComponentNewsletterSignupGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentNewsletterSignupEdge!]!
  nodes: [ContentfulComponentNewsletterSignup!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentNewsletterSignupFieldSelector!): [String!]!
  max(field: ContentfulComponentNewsletterSignupFieldSelector!): Float
  min(field: ContentfulComponentNewsletterSignupFieldSelector!): Float
  sum(field: ContentfulComponentNewsletterSignupFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentNewsletterSignupFieldSelector!): [ContentfulComponentNewsletterSignupGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulComponentContactFormSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentContactFormSysContentTypeFilterInput
}

input ContentfulComponentContactFormSysContentTypeFilterInput {
  sys: ContentfulComponentContactFormSysContentTypeSysFilterInput
}

input ContentfulComponentContactFormSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

type ContentfulComponentContactFormConnection {
  totalCount: Int!
  edges: [ContentfulComponentContactFormEdge!]!
  nodes: [ContentfulComponentContactForm!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentContactFormFieldSelector!): [String!]!
  max(field: ContentfulComponentContactFormFieldSelector!): Float
  min(field: ContentfulComponentContactFormFieldSelector!): Float
  sum(field: ContentfulComponentContactFormFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentContactFormFieldSelector!): [ContentfulComponentContactFormGroupConnection!]!
}

type ContentfulComponentContactFormEdge {
  next: ContentfulComponentContactForm
  node: ContentfulComponentContactForm!
  previous: ContentfulComponentContactForm
}

input ContentfulComponentContactFormFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  heading: FieldSelectorEnum
  styles: FieldSelectorEnum
  introContent: RichTextFieldSelector
  availableTopics: FieldSelectorEnum
  showNewsletterSignup: FieldSelectorEnum
  submitButtonLabel: FieldSelectorEnum
  successHeading: FieldSelectorEnum
  successBody: RichTextFieldSelector
  errorHeading: FieldSelectorEnum
  errorBody: RichTextFieldSelector
  page: ContentfulPageFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentContactFormSysFieldSelector
  component_group: ContentfulComponentGroupFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentContactFormSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentContactFormSysContentTypeFieldSelector
}

input ContentfulComponentContactFormSysContentTypeFieldSelector {
  sys: ContentfulComponentContactFormSysContentTypeSysFieldSelector
}

input ContentfulComponentContactFormSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

type ContentfulComponentContactFormGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentContactFormEdge!]!
  nodes: [ContentfulComponentContactForm!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentContactFormFieldSelector!): [String!]!
  max(field: ContentfulComponentContactFormFieldSelector!): Float
  min(field: ContentfulComponentContactFormFieldSelector!): Float
  sum(field: ContentfulComponentContactFormFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentContactFormFieldSelector!): [ContentfulComponentContactFormGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulComponentContactFormFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  heading: StringQueryOperatorInput
  styles: StringQueryOperatorInput
  introContent: RichTextFilterInput
  availableTopics: StringQueryOperatorInput
  showNewsletterSignup: BooleanQueryOperatorInput
  submitButtonLabel: StringQueryOperatorInput
  successHeading: StringQueryOperatorInput
  successBody: RichTextFilterInput
  errorHeading: StringQueryOperatorInput
  errorBody: RichTextFilterInput
  page: ContentfulPageFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentContactFormSysFilterInput
  component_group: ContentfulComponentGroupFilterListInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentContactFormSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  heading: SortOrderEnum
  styles: SortOrderEnum
  introContent: RichTextSortInput
  availableTopics: SortOrderEnum
  showNewsletterSignup: SortOrderEnum
  submitButtonLabel: SortOrderEnum
  successHeading: SortOrderEnum
  successBody: RichTextSortInput
  errorHeading: SortOrderEnum
  errorBody: RichTextSortInput
  page: ContentfulPageSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentContactFormSysSortInput
  component_group: ContentfulComponentGroupSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentContactFormSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentContactFormSysContentTypeSortInput
}

input ContentfulComponentContactFormSysContentTypeSortInput {
  sys: ContentfulComponentContactFormSysContentTypeSysSortInput
}

input ContentfulComponentContactFormSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulComponentCommissionCardSysFilterInput {
  type: StringQueryOperatorInput
  revision: IntQueryOperatorInput
  contentType: ContentfulComponentCommissionCardSysContentTypeFilterInput
}

input ContentfulComponentCommissionCardSysContentTypeFilterInput {
  sys: ContentfulComponentCommissionCardSysContentTypeSysFilterInput
}

input ContentfulComponentCommissionCardSysContentTypeSysFilterInput {
  type: StringQueryOperatorInput
  linkType: StringQueryOperatorInput
  id: StringQueryOperatorInput
}

type ContentfulComponentCommissionCardConnection {
  totalCount: Int!
  edges: [ContentfulComponentCommissionCardEdge!]!
  nodes: [ContentfulComponentCommissionCard!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentCommissionCardFieldSelector!): [String!]!
  max(field: ContentfulComponentCommissionCardFieldSelector!): Float
  min(field: ContentfulComponentCommissionCardFieldSelector!): Float
  sum(field: ContentfulComponentCommissionCardFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentCommissionCardFieldSelector!): [ContentfulComponentCommissionCardGroupConnection!]!
}

type ContentfulComponentCommissionCardEdge {
  next: ContentfulComponentCommissionCard
  node: ContentfulComponentCommissionCard!
  previous: ContentfulComponentCommissionCard
}

input ContentfulComponentCommissionCardFieldSelector {
  contentful_id: FieldSelectorEnum
  id: FieldSelectorEnum
  node_locale: FieldSelectorEnum
  title: FieldSelectorEnum
  coverImage: ContentfulAssetFieldSelector
  developer: FieldSelectorEnum
  publisher: FieldSelectorEnum
  releaseYear: FieldSelectorEnum
  steamLink: FieldSelectorEnum
  itchioLink: FieldSelectorEnum
  youTubeLink: FieldSelectorEnum
  otherLink: FieldSelectorEnum
  component_group: ContentfulComponentGroupFieldSelector
  spaceId: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  sys: ContentfulComponentCommissionCardSysFieldSelector
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentfulComponentCommissionCardSysFieldSelector {
  type: FieldSelectorEnum
  revision: FieldSelectorEnum
  contentType: ContentfulComponentCommissionCardSysContentTypeFieldSelector
}

input ContentfulComponentCommissionCardSysContentTypeFieldSelector {
  sys: ContentfulComponentCommissionCardSysContentTypeSysFieldSelector
}

input ContentfulComponentCommissionCardSysContentTypeSysFieldSelector {
  type: FieldSelectorEnum
  linkType: FieldSelectorEnum
  id: FieldSelectorEnum
}

type ContentfulComponentCommissionCardGroupConnection {
  totalCount: Int!
  edges: [ContentfulComponentCommissionCardEdge!]!
  nodes: [ContentfulComponentCommissionCard!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulComponentCommissionCardFieldSelector!): [String!]!
  max(field: ContentfulComponentCommissionCardFieldSelector!): Float
  min(field: ContentfulComponentCommissionCardFieldSelector!): Float
  sum(field: ContentfulComponentCommissionCardFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulComponentCommissionCardFieldSelector!): [ContentfulComponentCommissionCardGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulComponentCommissionCardFilterInput {
  contentful_id: StringQueryOperatorInput
  id: StringQueryOperatorInput
  node_locale: StringQueryOperatorInput
  title: StringQueryOperatorInput
  coverImage: ContentfulAssetFilterInput
  developer: StringQueryOperatorInput
  publisher: StringQueryOperatorInput
  releaseYear: StringQueryOperatorInput
  steamLink: StringQueryOperatorInput
  itchioLink: StringQueryOperatorInput
  youTubeLink: StringQueryOperatorInput
  otherLink: StringQueryOperatorInput
  component_group: ContentfulComponentGroupFilterListInput
  spaceId: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  sys: ContentfulComponentCommissionCardSysFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentfulComponentCommissionCardSortInput {
  contentful_id: SortOrderEnum
  id: SortOrderEnum
  node_locale: SortOrderEnum
  title: SortOrderEnum
  coverImage: ContentfulAssetSortInput
  developer: SortOrderEnum
  publisher: SortOrderEnum
  releaseYear: SortOrderEnum
  steamLink: SortOrderEnum
  itchioLink: SortOrderEnum
  youTubeLink: SortOrderEnum
  otherLink: SortOrderEnum
  component_group: ContentfulComponentGroupSortInput
  spaceId: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  sys: ContentfulComponentCommissionCardSysSortInput
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentfulComponentCommissionCardSysSortInput {
  type: SortOrderEnum
  revision: SortOrderEnum
  contentType: ContentfulComponentCommissionCardSysContentTypeSortInput
}

input ContentfulComponentCommissionCardSysContentTypeSortInput {
  sys: ContentfulComponentCommissionCardSysContentTypeSysSortInput
}

input ContentfulComponentCommissionCardSysContentTypeSysSortInput {
  type: SortOrderEnum
  linkType: SortOrderEnum
  id: SortOrderEnum
}

input ContentfulContentTypeSysFilterInput {
  type: StringQueryOperatorInput
}

type ContentfulContentTypeConnection {
  totalCount: Int!
  edges: [ContentfulContentTypeEdge!]!
  nodes: [ContentfulContentType!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulContentTypeFieldSelector!): [String!]!
  max(field: ContentfulContentTypeFieldSelector!): Float
  min(field: ContentfulContentTypeFieldSelector!): Float
  sum(field: ContentfulContentTypeFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulContentTypeFieldSelector!): [ContentfulContentTypeGroupConnection!]!
}

type ContentfulContentTypeEdge {
  next: ContentfulContentType
  node: ContentfulContentType!
  previous: ContentfulContentType
}

input ContentfulContentTypeFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  displayField: FieldSelectorEnum
  description: FieldSelectorEnum
  sys: ContentfulContentTypeSysFieldSelector
}

input ContentfulContentTypeSysFieldSelector {
  type: FieldSelectorEnum
}

type ContentfulContentTypeGroupConnection {
  totalCount: Int!
  edges: [ContentfulContentTypeEdge!]!
  nodes: [ContentfulContentType!]!
  pageInfo: PageInfo!
  distinct(field: ContentfulContentTypeFieldSelector!): [String!]!
  max(field: ContentfulContentTypeFieldSelector!): Float
  min(field: ContentfulContentTypeFieldSelector!): Float
  sum(field: ContentfulContentTypeFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentfulContentTypeFieldSelector!): [ContentfulContentTypeGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentfulContentTypeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  displayField: StringQueryOperatorInput
  description: StringQueryOperatorInput
  sys: ContentfulContentTypeSysFilterInput
}

input ContentfulContentTypeSortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
  name: SortOrderEnum
  displayField: SortOrderEnum
  description: SortOrderEnum
  sys: ContentfulContentTypeSysSortInput
}

input ContentfulContentTypeSysSortInput {
  type: SortOrderEnum
}